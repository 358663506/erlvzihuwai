"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewConfiguration = void 0;
const decorator_1 = require("@midwayjs/decorator");
const mw_util_1 = require("@midwayjs/mw-util");
const path_1 = require("path");
const viewManager_1 = require("./viewManager");
let ViewConfiguration = class ViewConfiguration {
    async onReady(container) {
        if (!this.app.config) {
            this.app.config = this.app.getConfig();
        }
        (0, mw_util_1.completeAssign)(this.app.context, require('egg-view/app/extend/context'));
        this.app.view = await container.getAsync(viewManager_1.ViewManager);
        if (!this.app.toAsyncFunction) {
            this.app.toAsyncFunction = method => {
                return method;
            };
        }
    }
};
__decorate([
    (0, decorator_1.App)(),
    __metadata("design:type", Object)
], ViewConfiguration.prototype, "app", void 0);
ViewConfiguration = __decorate([
    (0, decorator_1.Configuration)({
        namespace: 'view',
        importConfigs: [(0, path_1.join)(__dirname, 'config')],
    })
], ViewConfiguration);
exports.ViewConfiguration = ViewConfiguration;
//# sourceMappingURL=configuration.js.map