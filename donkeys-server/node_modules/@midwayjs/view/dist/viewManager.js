"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewManager = void 0;
const OriginViewManager = require("egg-view/lib/view_manager");
const decorator_1 = require("@midwayjs/decorator");
const mw_util_1 = require("@midwayjs/mw-util");
let ViewManager = class ViewManager {
    get extMap() {
        return this.innerManager.extMap;
    }
    get config() {
        return this.innerManager.config;
    }
    async init() {
        const mockApp = (0, mw_util_1.createMockApp)(this.app);
        this.innerManager = new OriginViewManager(mockApp);
    }
    /**
     * This method can register view engine.
     *
     * You can define a view engine class contains two method, `render` and `renderString`
     *
     * ```js
     * class View {
     *   render() {}
     *   renderString() {}
     * }
     * ```
     * @param {String} name - the name of view engine
     * @param {Object} viewEngine - the class of view engine
     */
    use(name, viewEngine) {
        return this.innerManager.use(name, viewEngine);
    }
    /**
     * Resolve the path based on the given name,
     * if the name is `user.html` and root is `app/view` (by default),
     * it will return `app/view/user.html`
     * @param {String} name - the given path name, it's relative to config.root
     * @return {String} filename - the full path
     */
    async resolve(name) {
        return this.innerManager.resolve(name);
    }
    get(key) {
        return this.innerManager.get(key);
    }
};
__decorate([
    (0, decorator_1.App)(),
    __metadata("design:type", Object)
], ViewManager.prototype, "app", void 0);
__decorate([
    (0, decorator_1.Init)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ViewManager.prototype, "init", null);
ViewManager = __decorate([
    (0, decorator_1.Provide)(),
    (0, decorator_1.Scope)(decorator_1.ScopeEnum.Singleton)
], ViewManager);
exports.ViewManager = ViewManager;
//# sourceMappingURL=viewManager.js.map