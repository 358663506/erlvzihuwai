"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateApiPropertyDoc = exports.CreateApiDoc = exports.SwaggerAPI = exports.SWAGGER_DOCUMENT_KEY = void 0;
const decorator_1 = require("@midwayjs/decorator");
exports.SWAGGER_DOCUMENT_KEY = 'common:swagger_doc_api';
class SwaggerAPI {
    constructor() {
        this._params = [];
        this._response = [];
    }
    summary(summary) {
        this._summary = summary;
        return this;
    }
    description(desc) {
        this._description = desc;
        return this;
    }
    param(description, options) {
        if (typeof description === 'string') {
            this._params.push({
                description,
                ...options,
            });
        }
        else {
            if (!options) {
                options = {};
            }
            options.example = convertExample(description === null || description === void 0 ? void 0 : description.example);
            this._params.push(options);
        }
        return this;
    }
    respond(status, description, respondType, options) {
        const respondContentType = convertRespondType(respondType, options);
        if (respondContentType) {
            this._response.push(convertRespondOptions({
                status,
                description: description || '',
                content: respondContentType,
                ...options,
            }));
        }
        else {
            this._response.push(convertRespondOptions({
                status,
                description: description || '',
                ...options,
            }));
        }
        return this;
    }
    buildJSON() {
        return {
            summary: this._summary,
            description: this._description,
            params: this._params,
            response: this._response,
        };
    }
    build() {
        return (target, property) => {
            (0, decorator_1.savePropertyMetadata)(exports.SWAGGER_DOCUMENT_KEY, this.buildJSON(), target, property);
        };
    }
}
exports.SwaggerAPI = SwaggerAPI;
function CreateApiDoc(data) {
    if (data) {
        return (target, property) => { };
    }
    else {
        return new SwaggerAPI();
    }
}
exports.CreateApiDoc = CreateApiDoc;
function CreateApiPropertyDoc(description, options) {
    return (target, propertyKey) => {
        const metadata = (0, decorator_1.getPropertyType)(target, propertyKey);
        (0, decorator_1.attachClassMetadata)(exports.SWAGGER_DOCUMENT_KEY, {
            description,
            type: metadata.name,
            isBaseType: metadata.isBaseType,
            originDesign: metadata.originDesign,
            ...options,
        }, target, propertyKey);
    };
}
exports.CreateApiPropertyDoc = CreateApiPropertyDoc;
function convertExample(example, respondType) {
    if (example === null || example === undefined) {
        return undefined;
    }
    switch (respondType) {
        case 'object':
        case 'json':
        case 'boolean':
        case 'number':
            return example;
    }
    return example.toString();
}
function convertProperties(example, properties) {
    if (!example && !properties) {
        return undefined;
    }
    if (!properties) {
        properties = {};
        const exampleKeys = Object.keys(example);
        for (let i = 0; i < exampleKeys.length; i++) {
            const value = example[exampleKeys[i]];
            const valueType = typeof value;
            switch (valueType) {
                case 'boolean':
                case 'number':
                case 'string':
                    properties[exampleKeys[i]] = {
                        type: valueType,
                    };
                    break;
                case 'object':
                    if (Array.isArray(value)) {
                        properties[exampleKeys[i]] = {
                            type: 'array',
                            items: {
                                type: typeof value,
                                properties: convertProperties(value[0]),
                            },
                        };
                    }
                    else {
                        properties[exampleKeys[i]] = {
                            type: 'object',
                            properties: convertProperties(example[exampleKeys[i]]),
                        };
                    }
                    break;
                default:
                    break;
            }
        }
    }
    return properties;
}
function convertRespondType(respondType, options) {
    switch (respondType) {
        case 'text':
            return {
                'text/plain': {
                    schema: {
                        type: 'string',
                        example: convertExample(options === null || options === void 0 ? void 0 : options.example, respondType),
                    },
                },
            };
        case 'object':
            return {
                'application/json': {
                    schema: {
                        type: 'object',
                        properties: convertProperties(options === null || options === void 0 ? void 0 : options.example, options.properties),
                        example: convertExample(options === null || options === void 0 ? void 0 : options.example, respondType),
                    },
                },
            };
        case 'json':
            return {
                'application/json': {
                    schema: {
                        type: 'object',
                        properties: convertProperties(options === null || options === void 0 ? void 0 : options.example, options.properties),
                        example: convertExample(options === null || options === void 0 ? void 0 : options.example, respondType),
                    },
                },
            };
        case 'boolean':
            return {
                'text/plain': {
                    schema: {
                        type: 'string',
                        example: convertExample(options === null || options === void 0 ? void 0 : options.example, respondType),
                    },
                },
            };
        case 'number':
            return {
                'text/plain': {
                    schema: {
                        type: 'string',
                        example: convertExample(options === null || options === void 0 ? void 0 : options.example, respondType),
                    },
                },
            };
        case 'html':
            return {
                'text/html': {
                    schema: {
                        type: 'string',
                        example: convertExample(options === null || options === void 0 ? void 0 : options.example, respondType),
                    },
                },
            };
        case 'css':
            return {
                'text/css': {
                    schema: {
                        type: 'string',
                        example: convertExample(options === null || options === void 0 ? void 0 : options.example, respondType),
                    },
                },
            };
        case 'js':
            return {
                'application/javascript': {
                    schema: {
                        type: 'string',
                        example: convertExample(options === null || options === void 0 ? void 0 : options.example, respondType),
                    },
                },
            };
        case 'svg':
            return {
                'image/svg+xml': {
                    schema: {
                        type: 'string',
                        example: convertExample(options === null || options === void 0 ? void 0 : options.example, respondType),
                    },
                },
            };
        case 'gif':
            return {
                'image/gif': {
                    schema: {
                        type: 'string',
                        example: convertExample(options === null || options === void 0 ? void 0 : options.example, respondType),
                    },
                },
            };
        case 'jpg':
            return {
                'image/jpeg': {
                    schema: {
                        type: 'string',
                        example: convertExample(options === null || options === void 0 ? void 0 : options.example, respondType),
                    },
                },
            };
        case 'png':
            return {
                'mage/png': {
                    schema: {
                        type: 'string',
                        example: convertExample(options === null || options === void 0 ? void 0 : options.example, respondType),
                    },
                },
            };
        default:
            return undefined;
    }
}
function convertRespondOptions(respond) {
    if (respond.headers) {
        for (const headerName in respond.headers) {
            const originRespondHeader = respond.headers[headerName];
            respond.headers[headerName] = {
                description: originRespondHeader.description,
                schema: {
                    type: originRespondHeader.type,
                },
            };
        }
    }
    return respond;
}
//# sourceMappingURL=createAPI.js.map