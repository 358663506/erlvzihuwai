"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwaggerController = void 0;
const decorator_1 = require("@midwayjs/decorator");
const fs_1 = require("fs");
const path_1 = require("path");
const core_1 = require("@midwayjs/core");
const generator_1 = require("../service/generator");
let SwaggerController = class SwaggerController {
    constructor() {
        const { getAbsoluteFSPath } = (0, core_1.safeRequire)('swagger-ui-dist');
        if (getAbsoluteFSPath) {
            this.swaggerUiAssetPath = getAbsoluteFSPath();
        }
    }
    async renderJSON() {
        return this.swaggerGenerator.generate();
    }
    async renderSwagger(fileName) {
        if (!this.swaggerUiAssetPath) {
            return 'please run "npm install swagger-ui-dist" first';
        }
        if (!fileName) {
            fileName = '/index.html';
        }
        const resourceAbsolutePath = (0, path_1.join)(this.swaggerUiAssetPath, fileName);
        if ((0, path_1.extname)(fileName)) {
            // 7 天内使用缓存
            if (this.app.getFrameworkType() === core_1.MidwayFrameworkType.WEB_EXPRESS) {
                this.ctx.res.type((0, path_1.extname)(fileName));
                this.ctx.res.set('cache-control', 'public, max-age=604800');
            }
            else {
                this.ctx.type = (0, path_1.extname)(fileName);
                this.ctx.set('cache-control', 'public, max-age=604800');
            }
        }
        if (fileName.indexOf('index.html') !== -1) {
            const htmlContent = this.getSwaggerUIResource(resourceAbsolutePath, 'utf-8');
            return htmlContent.replace('"https://petstore.swagger.io/v2/swagger.json"', "location.href.replace('/swagger-ui/index.html', '/swagger-ui/json')");
        }
        else {
            return this.getSwaggerUIResource(resourceAbsolutePath);
        }
    }
    getSwaggerUIResource(requestPath, encoding) {
        return (0, fs_1.readFileSync)(requestPath, {
            encoding,
        });
    }
};
__decorate([
    (0, decorator_1.App)(),
    __metadata("design:type", Object)
], SwaggerController.prototype, "app", void 0);
__decorate([
    (0, decorator_1.Inject)(),
    __metadata("design:type", Object)
], SwaggerController.prototype, "ctx", void 0);
__decorate([
    (0, decorator_1.Inject)(),
    __metadata("design:type", generator_1.SwaggerGenerator)
], SwaggerController.prototype, "swaggerGenerator", void 0);
__decorate([
    (0, decorator_1.Get)('/json'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], SwaggerController.prototype, "renderJSON", null);
__decorate([
    (0, decorator_1.Get)('/'),
    (0, decorator_1.Get)('/:fileName'),
    __param(0, (0, decorator_1.Param)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], SwaggerController.prototype, "renderSwagger", null);
SwaggerController = __decorate([
    (0, decorator_1.Provide)(),
    (0, decorator_1.Controller)('/swagger-ui'),
    __metadata("design:paramtypes", [])
], SwaggerController);
exports.SwaggerController = SwaggerController;
//# sourceMappingURL=swagger.js.map