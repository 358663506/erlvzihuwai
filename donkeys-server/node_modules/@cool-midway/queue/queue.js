"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoolQueue = void 0;
const decorator_1 = require("@midwayjs/decorator");
const queue_1 = require("./decorator/queue");
const decorator_2 = require("@midwayjs/decorator");
const bullmq_1 = require("bullmq");
const core_1 = require("@cool-midway/core");
const redis_1 = require("@cool-midway/redis");
const Redis = require("ioredis");
const cluster = require("cluster");
// import { useEntityModel } from '@midwayjs/orm';
/**
 * 任务调度
 */
let CoolQueue = class CoolQueue {
    async init() {
        this.app['COOL_QUEUE_WORKERS'] = [];
        try {
            this.redisConfig = await this.coolPlugin.getConfig("redis");
            if (!this.redisConfig) {
                return core_1.PLUGINSTATUS.NOCONF;
            }
            const getConfig = this.redisConfig.redis
                ? this.redisConfig.redis
                : this.redisConfig;
            if (typeof getConfig == "string") {
                this.redisConfig = JSON.parse(getConfig);
            }
            const status = await this.checkStatus();
            if (status == core_1.PLUGINSTATUS.USABLE) {
                this.scan();
            }
            return status;
        }
        catch (error) {
            return core_1.PLUGINSTATUS.UNKNOWNERR;
        }
    }
    async scan() {
        let index = 20;
        const time = setInterval(async () => {
            index--;
            if (index <= 0) {
                clearInterval(time);
            }
            clearInterval(time);
            const modules = decorator_2.listModule(queue_1.COOL_QUEUE_KEY);
            for (let mod of modules) {
                const id = decorator_1.getProviderId(mod);
                const cls = await this.app.getApplicationContext().getAsync(id);
                // @ts-ignore
                this.createQueue(cls, id, mod);
            }
        }, 1000);
    }
    /**
     * 检查插件状态
     */
    async checkStatus() {
        return await this.redisCacheHandler.checkStatus();
    }
    /**
     * 队列名称
     * @param name
     */
    async createQueue(cls, name, mod) {
        var _a;
        let opts, connection;
        if (this.redisConfig instanceof Array) {
            connection = new Redis.Cluster(this.redisConfig, {
                enableReadyCheck: false,
            });
        }
        else {
            connection = new Redis({
                ...this.redisConfig,
                enableReadyCheck: false,
                maxRetriesPerRequest: null
            });
        }
        const config = decorator_1.getClassMetadata(queue_1.COOL_QUEUE_KEY, mod);
        opts = { connection, prefix: `{queue${name}}`, defaultJobOptions: {
                removeOnComplete: true,
                removeOnFail: true,
                attempts: 5,
                backoff: {
                    type: 'fixed',
                    delay: 10000
                },
                ...(config.queue || {})
            } };
        const queue = new bullmq_1.Queue(name, opts);
        new bullmq_1.QueueScheduler(name, opts);
        cls.metaQueue = queue;
        cls.queueName = name;
        if (config.type == 'comm' || (config.type == 'single' && (((_a = cluster.worker) === null || _a === void 0 ? void 0 : _a.id) == 1 || this.app.getEnv() == 'local'))) {
            cls.worker = new bullmq_1.Worker(name, async (job) => {
                await cls.data(job, async () => {
                    await job.isCompleted();
                });
            }, {
                connection: opts.connection,
                prefix: opts.prefix,
                ...(config.worker || {})
            });
            this.app['COOL_QUEUE_WORKERS'].push(cls.worker);
        }
        else {
            cls.getters = new bullmq_1.QueueGetters(name, opts);
        }
        this.coreLogger.info(`\x1B[36m [cool:core] create ${name} queue  \x1B[0m`);
        this.app.getApplicationContext().registry.removeDefinition(name);
        this.app.getApplicationContext().registry.registerObject(name, cls);
        this.app.getApplicationContext().registry.removeDefinition(decorator_1.getProviderUUId(mod));
        this.app.getApplicationContext().registry.registerObject(decorator_1.getProviderUUId(mod), cls);
    }
};
__decorate([
    decorator_1.App(),
    __metadata("design:type", Object)
], CoolQueue.prototype, "app", void 0);
__decorate([
    decorator_1.Logger(),
    __metadata("design:type", Object)
], CoolQueue.prototype, "coreLogger", void 0);
__decorate([
    decorator_1.Inject("cool:coolPlugin"),
    __metadata("design:type", core_1.CoolPlugin)
], CoolQueue.prototype, "coolPlugin", void 0);
__decorate([
    decorator_1.Inject("redis:redisCacheHandler"),
    __metadata("design:type", redis_1.RedisCacheHandler)
], CoolQueue.prototype, "redisCacheHandler", void 0);
__decorate([
    decorator_1.Init(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], CoolQueue.prototype, "init", null);
CoolQueue = __decorate([
    decorator_1.Provide()
], CoolQueue);
exports.CoolQueue = CoolQueue;
//# sourceMappingURL=queue.js.map