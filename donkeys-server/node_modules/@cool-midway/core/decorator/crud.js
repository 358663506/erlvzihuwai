"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoolEntityCrud = exports.COOL_CRUD_KEY = void 0;
const decorator_1 = require("@midwayjs/decorator");
const location_1 = require("../util/location");
const os = require("os");
const fs = require("fs");
const _ = require("lodash");
exports.COOL_CRUD_KEY = "decorator:cool:crud:key";
/**
 * crud
 * @param entityCurdOption
 * @returns
 */
function CoolEntityCrud(curdOption = {
    api: ["add", "delete", "update", "info", "list", "page"],
}, routerOptions = { middleware: [], sensitive: true }) {
    return (target) => {
        let prefix;
        if (typeof curdOption === "string") {
            prefix = curdOption;
        }
        else {
            prefix = (curdOption === null || curdOption === void 0 ? void 0 : curdOption.prefix) || "";
        }
        // @ts-ignore
        if (!curdOption.api) {
            // @ts-ignore
            curdOption.api = ["add", "delete", "update", "info", "list", "page"];
        }
        location_1.default.scriptPath(target).then(async (res) => {
            const pathSps = res.path.split(".");
            const paths = pathSps[pathSps.length - 2].split("/").reverse();
            const index = paths.indexOf("modules");
            const module = paths[index - 1];
            if (module) {
                // 追加模块中间件
                let path = `${res.path.split(`app/modules/${module}`)[0]}app/modules/${module}/config.${_.endsWith(res.path, 'ts') ? 'ts' : 'js'}`;
                if (os.type() == 'Windows_NT') {
                    path = path.substr(1);
                }
                if (fs.existsSync(path)) {
                    const data = fs.readFileSync(path).toString().replace(new RegExp(' ', 'gm'), '');
                    let result = [];
                    if (data.includes('middlewares')) {
                        const dataArr = data.split('\nmiddlewares:[');
                        if (dataArr.length >= 2) {
                            let dataM = dataArr[1];
                            dataM = dataM.substr(0, dataM.indexOf(']') + 1).replace(new RegExp("'", 'gm'), '"').replace(new RegExp("\r\n", 'gm'), '').replace(new RegExp("\n", 'gm'), '');
                            result = JSON.parse(`[${dataM.replace(',]', ']')}`);
                        }
                    }
                    if (!_.isEmpty(result)) {
                        routerOptions.middleware = result.concat(routerOptions.middleware || []);
                        routerOptions.middleware = _.uniq(routerOptions.middleware);
                    }
                }
            }
            // 将装饰的类，绑定到该装饰器，用于后续能获取到 class
            decorator_1.saveModule(exports.COOL_CRUD_KEY, target);
            // 保存一些元数据信息，任意你希望存的东西
            decorator_1.saveClassMetadata(exports.COOL_CRUD_KEY, {
                prefix,
                curdOption,
                routerOptions,
                module
            }, target);
        });
        // 指定 IoC 容器创建实例的作用域，这里注册为请求作用域，这样能取到 ctx
        decorator_1.Scope(decorator_1.ScopeEnum.Request)(target);
    };
}
exports.CoolEntityCrud = CoolEntityCrud;
//# sourceMappingURL=crud.js.map