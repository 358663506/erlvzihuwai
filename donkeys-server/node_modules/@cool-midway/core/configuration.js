"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoConfiguration = void 0;
const decorator_1 = require("@midwayjs/decorator");
const decorator_2 = require("@midwayjs/decorator");
const path_1 = require("path");
const egg_1 = require("egg");
const orm = require("@midwayjs/orm");
const moment = require("moment");
const base_1 = require("./service/base");
const base_2 = require("./controller/base");
const bodyParser = require("koa-bodyparser");
const Joi = require("joi");
const validate_1 = require("./exceptions/validate");
const _ = require("lodash");
const fs = require("fs");
const local_1 = require("./component/file/local");
const orm_1 = require("@midwayjs/orm");
const conf_1 = require("./entity/core/conf");
const typeorm_1 = require("typeorm");
const Importer = require("mysql2-import");
const node_1 = require("./component/cache/node");
const module_1 = require("./entity/core/module");
const core_1 = require("./exceptions/core");
const _1 = require(".");
const tag_1 = require("./decorator/tag");
const location_1 = require("./util/location");
let AutoConfiguration = class AutoConfiguration {
    /**
     * 配置加载完成
     * @param container
     * @param app
     */
    async onConfigLoad(container, app) {
        global['config'] = this.app.config;
    }
    // moduleMiddleware = {};
    async onReady(container) {
        // 检查数据库版本
        await this.checkDbVersion();
        // 解析body
        this.app.use(bodyParser());
        // 事件
        this.coolEventManager.init();
        // 处理异常
        this.ex();
        // 注入对象
        this.registerObject(container);
        // 处理常用函数
        this.jsFunc();
        // swagger数据
        await this.swagger(container);
        // 处理模块
        await this.modules(container);
        // 处理配置路由前缀
        this.routerPrefix();
        // 处理模型CRUD
        await this.crud(container);
        // 初始化数据库
        // await this.initDataBase(container);
        setTimeout(() => {
            location_1.default.clean();
            this.coreLogger.info('\x1B[36m [cool:core] location clean \x1B[0m');
        }, 10000);
        this.coreLogger.info('\x1B[36m [cool:core] midwayjs cool core component ready \x1B[0m');
    }
    async onStop(container) {
    }
    /**
     * 检查数据库版本
     */
    async checkDbVersion() {
        const versions = (await typeorm_1.getManager().query('SELECT VERSION() AS version'))[0].version.split('.');
        if ((versions[0] == 5 && versions[1] < 7) || versions[0] < 5) {
            throw new core_1.CoolCoreException('数据库不满足要求：mysql>=5.7，请升级数据库版本');
        }
    }
    /**
     * swagger原始数据
     */
    async swagger(container) {
        if (!container.registry.hasDefinition('swagger:swaggerGenerator')) {
            return;
        }
        const swaggerGenerator = await container.getAsync('swagger:swaggerGenerator');
        if (swaggerGenerator) {
            // @ts-ignore
            this.swaggerJson = swaggerGenerator.generate();
        }
    }
    // 处理配置路由前缀
    routerPrefix() {
        const routerPrefix = this.coolConfig.router.prefix;
        if (routerPrefix) {
            this.app.use(async (ctx, next) => {
                if (!ctx.path.startsWith(routerPrefix)) {
                    ctx.status = 404;
                    ctx.set('Content-Type', 'text/html; charset=utf-8');
                    ctx.body = `<h1>404 Not Found</h1>`;
                    return;
                }
                else {
                    ctx.path = ctx.path.replace(routerPrefix, '');
                }
                await next();
            });
        }
        this.coreLogger.info('\x1B[36m [cool:core] midwayjs cool core router prefix handler \x1B[0m');
    }
    // 初始化数据库
    async initDataBase(container, sqlPath, module) {
        //const sqlPath = `${container.baseDir}/resource/init.sql`;
        // 延迟2秒再导入数据库
        setTimeout(() => {
            if (fs.existsSync(sqlPath)) {
                const t = setInterval(() => {
                    this.coreLogger.info('\x1B[36m [cool:core] midwayjs cool core init ' + module + ' database... \x1B[0m');
                }, 1000);
                const { host, username, password, database, charset, port } = this.ormConfig;
                const importer = new Importer({
                    host,
                    password,
                    database,
                    charset,
                    port,
                    user: username
                });
                importer.import(sqlPath).then(async () => {
                    clearInterval(t);
                    this.coreLogger.info('\x1B[36m [cool:core] midwayjs cool core init ' + module + ' database complete \x1B[0m');
                }).catch(err => {
                    clearTimeout(t);
                    this.coreLogger.error('\x1B[36m [cool:core] midwayjs cool core init ' + module + ' database err please manual import \x1B[0m');
                    this.coreLogger.error(err);
                    this.coreLogger.error(`自动初始化模块[${module}]数据库失败，尝试手动导入数据库`);
                });
            }
        }, 2000);
    }
    // 注入对象
    async registerObject(container) {
        // 注入缓存
        container.registerObject('core:cache:impl', await container.getAsync(node_1.NodeCacheHandler));
        // 注入文件上传
        container.registerObject('core:file:impl', await container.getAsync(local_1.LocalFileHandler));
        this.coreLogger.info('\x1B[36m [cool:core] midwayjs cool core cache register \x1B[0m');
    }
    // 处理异常
    ex() {
        this.app.use(async (ctx, next) => {
            try {
                await next();
            }
            catch (err) {
                this.coreLogger.error(err);
                ctx.body = {
                    code: err.status,
                    message: err.message
                };
            }
        });
    }
    // 处理常用函数
    jsFunc() {
        Date.prototype.toJSON = function () {
            return moment(this).format('YYYY-MM-DD HH:mm:ss');
        };
        // 新增String支持replaceAll方法
        String.prototype['replaceAll'] = function (s1, s2) {
            return this.replace(new RegExp(s1, 'gm'), s2);
        };
        this.coreLogger.info('\x1B[36m [cool:core] midwayjs cool core func handler \x1B[0m');
    }
    // 处理模块
    async modules(container) {
        const modulesDir = `${this.app.baseDir}/app/modules/`;
        if (!fs.existsSync(modulesDir)) {
            return;
        }
        let globalMiddlewareArr = [];
        const dirs = fs.readdirSync(modulesDir);
        for (const module of dirs) {
            const modulePath = `${modulesDir}/${module}`;
            const dirStats = fs.statSync(modulePath);
            if (dirStats.isDirectory()) {
                const moduleEntity = new module_1.CoreModule();
                moduleEntity.name = module;
                const configPath = `${modulePath}/config.${this.app.config.env == 'local' ? 'ts' : 'js'}`;
                if (fs.existsSync(configPath)) {
                    const moduleConfig = require(configPath).default(this.app);
                    moduleEntity.allConfig = JSON.stringify(moduleConfig);
                    if (!this.allConfig['module']) {
                        this.allConfig['module'] = {};
                    }
                    // 处理全局中间件
                    if (!_.isEmpty(moduleConfig.globalMiddlewares)) {
                        globalMiddlewareArr.push({
                            order: moduleConfig.order || 0,
                            data: moduleConfig.globalMiddlewares
                        });
                    }
                    // 追加配置
                    this.allConfig['module'][module] = moduleConfig;
                    if (!this.app['modules']) {
                        this.app['modules'] = [];
                    }
                    if (!this.app['modules'].includes(moduleEntity.name)) {
                        this.app['modules'].push(moduleEntity.name);
                        const check = await this.coreModule.findOne({ name: moduleEntity.name });
                        if (check) {
                            moduleEntity.id = check.id;
                        }
                        if (this.coolConfig.initDB) {
                            const sqlPath = `${modulePath}/init.sql`;
                            if (fs.existsSync(sqlPath)) {
                                if ((check && check.dbInit == 0) || !check) {
                                    await this.initDataBase(container, sqlPath, moduleEntity.name);
                                }
                                moduleEntity.dbInit = 1;
                            }
                        }
                        try {
                            await this.coreModule.save(moduleEntity);
                        }
                        catch (error) {
                        }
                    }
                }
                else {
                    throw new core_1.CoolCoreException(`模块【${module}】缺少config.ts配置文件`);
                }
            }
        }
        globalMiddlewareArr = _.orderBy(globalMiddlewareArr, ['order'], ['desc']);
        for (const middleware of globalMiddlewareArr) {
            for (const item of middleware.data) {
                this.app.use(await this.app['generateMiddleware'](item));
            }
        }
    }
    // 实体类型数据
    async eps(options, type) {
        var _a, _b;
        const swaggerPaths = ((_a = this.swaggerJson) === null || _a === void 0 ? void 0 : _a.paths) || {};
        const eps = [];
        for (const option of options) {
            const curdOption = option.curdOption;
            const cObj = {};
            if (curdOption === null || curdOption === void 0 ? void 0 : curdOption.entity) {
                let columns = [];
                const alias = [];
                if (curdOption.entity.connectionName) {
                    cObj['a'] = typeorm_1.getRepository(curdOption.entity.entityKey, curdOption.entity.connectionName).metadata.columns;
                }
                else {
                    cObj['a'] = typeorm_1.getRepository(curdOption.entity).metadata.columns;
                }
                alias.push('a');
                // 获得连表查询
                // @ts-ignore
                let pageOption = curdOption.pageQueryOp;
                if (pageOption) {
                    if (typeof pageOption == 'function') {
                        // @ts-ignore
                        pageOption = await pageOption(this.ctx, this.app);
                    }
                }
                // @ts-ignore
                const entitys = (pageOption === null || pageOption === void 0 ? void 0 : pageOption.join) ? pageOption === null || pageOption === void 0 ? void 0 : pageOption.join : pageOption === null || pageOption === void 0 ? void 0 : pageOption.leftJoin;
                if (!_.isEmpty(entitys)) {
                    entitys.forEach(e => {
                        cObj[e.alias] = typeorm_1.getRepository(e.entity).metadata.columns;
                        alias.push(e.alias);
                    });
                }
                let allColumns = [];
                Object.keys(cObj).forEach(key => {
                    allColumns = allColumns.concat(cObj[key]);
                });
                // 筛选字段
                if (_.isEmpty(pageOption === null || pageOption === void 0 ? void 0 : pageOption.select)) {
                    columns = allColumns;
                }
                else {
                    pageOption.select.forEach(e => {
                        if (e.includes('.*')) {
                            columns = columns.concat(cObj[e.split('.*')[0]]);
                        }
                        else {
                            if (e.toLowerCase().includes('as')) {
                                const cs = e.split(' ');
                                let c = e.split('.')[0];
                                if (!alias.includes(c)) {
                                    c = c.includes('(') ? c.split('(')[1] : c.split(' ')[c.split(' ').length - 1];
                                }
                                if (c) {
                                    columns.push(_.find(cObj[c], { propertyName: cs[cs.length - 1] }));
                                }
                                else {
                                    columns.push(_.find(allColumns, { propertyName: cs[cs.length - 1] }));
                                }
                            }
                            else {
                                const cs = e.split('.');
                                let c = cs[0];
                                if (!alias.includes(c)) {
                                    c = '';
                                }
                                if (c) {
                                    columns.push(_.find(cObj[c], { propertyName: cs[cs.length - 1] }));
                                }
                                else {
                                    columns.push(_.find(allColumns, { propertyName: cs[cs.length - 1] }));
                                }
                            }
                        }
                    });
                }
                columns = _.filter(_.uniqBy(columns, 'propertyName'), function (o) { return o; });
                const commColums = [];
                eps.push({
                    module: option.module ? option.module : 'other',
                    name: curdOption.entity.name,
                    api: option.api.map(e => {
                        e.dts = swaggerPaths[`${option.prefix}${e.path}`] ? swaggerPaths[`${option.prefix}${e.path}`][e.method] : {};
                        return e;
                    }),
                    prefix: option.prefix,
                    columns: _.filter(columns.map(e => {
                        return {
                            propertyName: e.propertyName,
                            type: typeof e.type == 'string' ? e.type : e.type.name.toLowerCase(),
                            length: e.length,
                            comment: e.comment,
                            nullable: e.isNullable,
                        };
                    }), function (o) {
                        if (['createTime', 'updateTime'].includes(o.propertyName)) {
                            commColums.push(o);
                        }
                        return o && !['createTime', 'updateTime'].includes(o.propertyName);
                    }).concat(commColums)
                });
            }
            else {
                eps.push({
                    module: option.module ? option.module : 'other',
                    name: ((_b = curdOption === null || curdOption === void 0 ? void 0 : curdOption.entity) === null || _b === void 0 ? void 0 : _b.name) || '',
                    api: option.api.map(e => {
                        e.dts = swaggerPaths[`${option.prefix}${e.path}`] ? swaggerPaths[`${option.prefix}${e.path}`][e.method] : {};
                        return e;
                    }),
                    prefix: option.prefix,
                    columns: []
                });
            }
        }
        // @ts-ignore
        this.app.getApplicationContext().registry.registerObject(`cool:eps:${type}`, _.groupBy(eps, 'module'));
        this.coreLogger.info('\x1B[36m [cool:core] midwayjs cool core eps ready \x1B[0m');
    }
    // 处理CRUD
    async crud(container) {
        var _a, _b, _c, _d, _e;
        let options = [];
        let urlTags = [];
        const summarys = {
            add: '新增',
            delete: '删除',
            update: '修改',
            page: '分页',
            list: '全部',
            info: '详情'
        };
        const entityOption = {};
        // 处理entity的crud
        const entityCruds = decorator_1.listModule(_1.COOL_CRUD_KEY);
        for (const crud of entityCruds) {
            const option = decorator_1.getClassMetadata(_1.COOL_CRUD_KEY, crud);
            // @ts-ignore
            option.curdOption.entity = crud;
            if (!option.prefix) {
                const { tableName } = typeorm_1.getRepository(crud).metadata;
                option.prefix = `/admin/${tableName.replace(new RegExp('_', 'gm'), '/')}`;
            }
            let api = option.curdOption.api.map(e => {
                return {
                    method: e == 'info' ? 'get' : 'post',
                    path: `/${e}`,
                    summary: summarys[e],
                    tag: '',
                };
            });
            option.api = api;
            options.push(option);
            const urlTag = (_a = option === null || option === void 0 ? void 0 : option.curdOption) === null || _a === void 0 ? void 0 : _a.urlTag;
            if (urlTag) {
                (urlTag.url || []).forEach(apiPath => {
                    const findApi = _.find(api, { path: `/${apiPath}` });
                    if (findApi) {
                        findApi.tag = urlTag.name;
                    }
                    urlTags.push({
                        name: urlTag.name,
                        url: `${option.prefix}/${apiPath}`
                    });
                });
            }
            entityOption[crud.name] = option;
        }
        // 处理控制层的crud
        const controllerCruds = decorator_1.listModule(decorator_1.CONTROLLER_KEY);
        for (const crud of controllerCruds) {
            const controllerOption = decorator_1.getClassMetadata(decorator_1.CONTROLLER_KEY, crud);
            const eOption = entityOption[((_c = (_b = controllerOption.curdOption) === null || _b === void 0 ? void 0 : _b.entity) === null || _c === void 0 ? void 0 : _c.name) || ''];
            let api = (((_d = controllerOption === null || controllerOption === void 0 ? void 0 : controllerOption.curdOption) === null || _d === void 0 ? void 0 : _d.api) || []).map(e => {
                return {
                    method: e == 'info' ? 'get' : 'post',
                    path: `/${e}`,
                    summary: summarys[e],
                    tag: ''
                };
            });
            const urlTag = (_e = controllerOption === null || controllerOption === void 0 ? void 0 : controllerOption.curdOption) === null || _e === void 0 ? void 0 : _e.urlTag;
            if (urlTag) {
                (urlTag.url || []).forEach(apiPath => {
                    const findApi = _.find(api, { path: `/${apiPath}` });
                    if (findApi) {
                        findApi.tag = urlTag.name;
                    }
                    urlTags.push({
                        name: urlTag.name,
                        url: `${controllerOption.prefix}/${apiPath}`
                    });
                });
            }
            const routers = decorator_1.getClassMetadata(decorator_1.WEB_ROUTER_KEY, crud);
            api = api.concat((routers || []).map(e => {
                return {
                    method: e.requestMethod,
                    path: e.path,
                    summary: e.summary,
                    tag: ''
                };
            }));
            const urlTagsMetadatas = decorator_1.getClassMetadata(tag_1.COOL_URL_TAG_KEY, crud);
            (urlTagsMetadatas || []).forEach(item => {
                const apiPath = `${(_.find(routers, { method: item.propertyKey })).path}`;
                const findApi = _.find(api, { path: apiPath });
                if (findApi) {
                    findApi.tag = item.name;
                }
                urlTags.push({
                    name: item.name,
                    url: `${controllerOption.prefix}${apiPath}`
                });
            });
            controllerOption.api = api;
            if (eOption) {
                const newOption = {
                    api: controllerOption.api,
                    prefix: controllerOption.prefix,
                    curdOption: {
                        ...eOption.curdOption,
                        ...controllerOption.curdOption,
                        prefix: controllerOption.prefix
                    },
                    routerOptions: {
                        ...eOption.routerOptions,
                        ...controllerOption.routerOptions,
                    }
                };
                options = _.dropWhile(options, { 'prefix': controllerOption.prefix });
                options.push(newOption);
            }
            else {
                options.push(controllerOption);
            }
        }
        const urlTagObj = _.groupBy(urlTags, 'name');
        Object.keys(urlTagObj).forEach(key => {
            urlTagObj[key] = urlTagObj[key].map(e => {
                return e.url;
            });
        });
        // @ts-ignore
        this.app.getApplicationContext().registry.registerObject('cool:urlTag', urlTagObj);
        // 构建实体类型数据
        this.eps(_.filter(options, function (o) {
            return _.startsWith(o.prefix, '/admin/');
        }), 'admin');
        this.eps(_.filter(options, function (o) {
            return !_.startsWith(o.prefix, '/admin/');
        }), 'open');
        for (const option of options) {
            // 获得到model
            let entityModel;
            const { entity } = (option === null || option === void 0 ? void 0 : option.curdOption) || {};
            if (entity) {
                let modelClass;
                if (entity.connectionName) {
                    modelClass = entity.entityKey;
                    entityModel = orm.useEntityModel(entity.entityKey, entity.connectionName);
                }
                else {
                    modelClass = entity;
                    entityModel = orm.useEntityModel(entity);
                }
                // 全局路由前缀
                const globalRouterPrefix = this.coolConfig.router.prefix;
                this.coreLogger.info(`\x1B[36m [cool:core] auto router prefix "${globalRouterPrefix ? globalRouterPrefix : ''}${option.prefix}"  \x1B[0m`);
                await this.CrudRouter(entityModel, option, modelClass, container, entity.connectionName);
            }
        }
        this.coreLogger.info('\x1B[36m [cool:core] midwayjs cool core crud handler \x1B[0m');
    }
    /**
     * CRUD 路由
     * @param entityModel
     * @param controllerOption
     * @param modelClass
     * @param container
     */
    async CrudRouter(entityModel, controllerOption, modelClass, container, connectionName) {
        const { api, pageQueryOp, listQueryOp, insertParam, before, infoIgnoreProperty, service } = controllerOption.curdOption || {};
        // 路由中间件
        const middlewares = [];
        let middlewareConfigs = this.middlewareConfig || [];
        if (!_.isEmpty(controllerOption === null || controllerOption === void 0 ? void 0 : controllerOption.routerOptions.middleware)) {
            middlewareConfigs = middlewareConfigs.concat(controllerOption === null || controllerOption === void 0 ? void 0 : controllerOption.routerOptions.middleware);
        }
        // 去重
        middlewareConfigs = _.uniq(middlewareConfigs);
        for (const item of middlewareConfigs) {
            middlewares.push(await this.app['generateMiddleware'](item));
        }
        // 全局路由前缀
        const globalRouterPrefix = this.coolConfig.router.prefix;
        // 遍历CRUD方法
        for (const url of api) {
            const method = url == 'info' ? 'get' : 'post';
            this.app.router[method](`${globalRouterPrefix ? globalRouterPrefix : ''}${controllerOption.prefix}/${url}`, ...middlewares, async (ctx, next) => {
                if (before) {
                    await before(ctx, this.app);
                }
                let baseService = await ctx.requestContext.getAsync(base_1.BaseService);
                if (service) {
                    baseService = await ctx.requestContext.getAsync(service);
                }
                baseService.setModle(entityModel);
                baseService.setCtx(ctx);
                // 插入参数值
                const requestParams = ctx.req.method === 'GET' ? ctx.request.queries : ctx.request.body;
                if (insertParam) {
                    const insertParamData = await insertParam(ctx, this.app);
                    for (const key in insertParamData) {
                        requestParams[key] = insertParamData[key];
                    }
                }
                ctx.status = 200;
                try {
                    switch (url) {
                        case 'add':
                            // 校验参数
                            this.validateParams(modelClass, requestParams);
                            ctx.body = this.baseController.ok(await baseService.add(requestParams));
                            break;
                        case 'delete':
                            ctx.body = this.baseController.ok(await baseService.delete(requestParams.ids));
                            break;
                        case 'update':
                            // 校验参数
                            this.validateParams(modelClass, requestParams);
                            ctx.body = this.baseController.ok(await baseService.update(requestParams));
                            break;
                        case 'info':
                            ctx.body = this.baseController.ok(await baseService.info(requestParams.id, infoIgnoreProperty));
                            break;
                        case 'list':
                            ctx.body = this.baseController.ok(await baseService.list(requestParams, listQueryOp, connectionName));
                            break;
                        case 'page':
                            ctx.body = this.baseController.ok(await baseService.page(requestParams, pageQueryOp, connectionName));
                            break;
                        default:
                            ctx.body = this.baseController.ok();
                    }
                }
                catch (error) {
                    this.coreLogger.error(error);
                    ctx.body = this.baseController.fail(error.message, error.status);
                }
            });
            //this.coreLogger.info(`\x1B[36m [cool:core] crud router "${method} ${globalRouterPrefix ? globalRouterPrefix : ''}${controllerOption.prefix}/${url}"  \x1B[0m`)
        }
    }
    /**
     * 校验参数
     * @param modelClass 要校验的模型
     * @param params 要检验的参数
     */
    validateParams(modelClass, params) {
        // 获得校验规则
        const rules = decorator_1.getClassMetadata(decorator_1.RULES_KEY, modelClass);
        const schema = Joi.object(rules);
        if (params instanceof Array) {
            for (const item of params) {
                const result = schema.validate(item);
                if (result.error) {
                    throw new validate_1.CoolValidateException(result.error.message);
                }
            }
        }
        else {
            const result = schema.validate(params);
            if (result.error) {
                throw new validate_1.CoolValidateException(result.error.message);
            }
        }
    }
};
__decorate([
    decorator_1.Inject(),
    __metadata("design:type", _1.CoolEventManager)
], AutoConfiguration.prototype, "coolEventManager", void 0);
__decorate([
    decorator_2.Logger(),
    __metadata("design:type", Object)
], AutoConfiguration.prototype, "coreLogger", void 0);
__decorate([
    decorator_1.App(),
    __metadata("design:type", egg_1.Application)
], AutoConfiguration.prototype, "app", void 0);
__decorate([
    decorator_1.Config('cool'),
    __metadata("design:type", Object)
], AutoConfiguration.prototype, "coolConfig", void 0);
__decorate([
    decorator_1.Config(decorator_1.ALL),
    __metadata("design:type", Object)
], AutoConfiguration.prototype, "allConfig", void 0);
__decorate([
    decorator_1.Config('orm'),
    __metadata("design:type", Object)
], AutoConfiguration.prototype, "ormConfig", void 0);
__decorate([
    decorator_1.Config('middleware'),
    __metadata("design:type", Object)
], AutoConfiguration.prototype, "middlewareConfig", void 0);
__decorate([
    orm_1.InjectEntityModel(conf_1.CoreConfig),
    __metadata("design:type", typeorm_1.Repository)
], AutoConfiguration.prototype, "coreConfig", void 0);
__decorate([
    orm_1.InjectEntityModel(module_1.CoreModule),
    __metadata("design:type", typeorm_1.Repository)
], AutoConfiguration.prototype, "coreModule", void 0);
__decorate([
    decorator_1.Inject(),
    __metadata("design:type", base_2.BaseController)
], AutoConfiguration.prototype, "baseController", void 0);
AutoConfiguration = __decorate([
    decorator_1.Configuration({
        imports: [
            orm
        ],
        namespace: 'cool',
        importConfigs: [path_1.join(__dirname, 'config')]
    })
], AutoConfiguration);
exports.AutoConfiguration = AutoConfiguration;
//# sourceMappingURL=configuration.js.map