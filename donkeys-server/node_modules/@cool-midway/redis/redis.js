"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisCacheHandler = void 0;
const core_1 = require("@cool-midway/core");
const decorator_1 = require("@midwayjs/decorator");
const IORedis = require("ioredis");
// @ts-ignore
const config = require("./package.json");
let RedisCacheHandler = class RedisCacheHandler {
    async init() {
        try {
            this.cache = null;
            this.redisConfig = await this.coolPlugin.getConfig(config.name.split("/")[1]);
            const getConfig = this.redisConfig.redis ? this.redisConfig.redis : this.redisConfig;
            if (typeof getConfig == 'string') {
                this.redisConfig = JSON.parse(getConfig);
            }
            this.createConnect();
        }
        catch (error) {
            this.cache = null;
        }
        return await this.checkStatus();
    }
    /**
     * 创建连接
     */
    async createConnect() {
        const SocketRedisSymbol = Symbol.for('COOL-CACHE#REDIS');
        if (this.app[SocketRedisSymbol]) {
            this.cache = this.app[SocketRedisSymbol];
            return;
        }
        let isFirstConnect = true;
        if (this.redisConfig instanceof Array) {
            this.cache = new IORedis.Cluster(this.redisConfig);
        }
        else {
            this.cache = new IORedis(this.redisConfig);
        }
        this.app['COOLCACHE'] = this.cache;
        let isError = false;
        this.cache.on('error', (e) => {
            if (isFirstConnect) {
                this.cache = null;
            }
            isFirstConnect = false;
            if (!isError) {
                this.coreLogger.error('\x1B[36m [cool:core] midwayjs cool redis error \x1B[0m');
                this.coreLogger.error(e);
                this.coolPlugin.changeStatus(config.pluginName, core_1.PLUGINSTATUS.UNKNOWNERR);
            }
            isError = true;
        });
        this.cache.on('connect', () => {
            this.app['COOLCACHE'] = this.cache;
            this.coolPlugin.changeStatus(config.pluginName, core_1.PLUGINSTATUS.USABLE);
            this.coreLogger.info('\x1B[36m [cool:core] midwayjs cool redis connect \x1B[0m');
        });
        this.cache.on('end', () => {
            this.cache = null;
        });
    }
    /**
     * 检查状态
     */
    async checkStatus() {
        if (!this.cache) {
            return core_1.PLUGINSTATUS.UNKNOWNERR;
        }
        try {
            if (!this.redisConfig) {
                return core_1.PLUGINSTATUS.NOCONF;
            }
            await this.cache.set('core:check:redis', 'yes');
            return core_1.PLUGINSTATUS.USABLE;
        }
        catch (error) {
            return core_1.PLUGINSTATUS.UNKNOWNERR;
        }
    }
    keys(pattern) {
        return this.cache.keys(pattern);
    }
    getMode() {
        return 'redis';
    }
    getMetaCache() {
        return this.cache;
    }
    /**
    * 设置缓存
    * @param key 键
    * @param val 值
    * @param ttl 过期时间(单位：秒)
    */
    async set(key, val, ttl) {
        if (!this.cache) {
            await this.init();
        }
        await this.cache.set(key, val);
        if (ttl) {
            await this.cache.expire(key, ttl);
        }
    }
    /**
     * 获得缓存
     * @param key 键
     */
    async get(key) {
        return await this.cache.get(key);
    }
    /**
     * 删除键
     * @param key 键
     */
    async del(key) {
        this.cache.del(key);
    }
};
__decorate([
    decorator_1.Inject('cool:coolPlugin'),
    __metadata("design:type", core_1.CoolPlugin)
], RedisCacheHandler.prototype, "coolPlugin", void 0);
__decorate([
    decorator_1.App(),
    __metadata("design:type", Object)
], RedisCacheHandler.prototype, "app", void 0);
__decorate([
    decorator_1.Logger(),
    __metadata("design:type", Object)
], RedisCacheHandler.prototype, "coreLogger", void 0);
__decorate([
    decorator_1.Init(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], RedisCacheHandler.prototype, "init", null);
RedisCacheHandler = __decorate([
    decorator_1.Provide(),
    decorator_1.Scope(decorator_1.ScopeEnum.Singleton)
], RedisCacheHandler);
exports.RedisCacheHandler = RedisCacheHandler;
//# sourceMappingURL=redis.js.map