"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sdk = void 0;
const decorator_1 = require("@midwayjs/decorator");
// @ts-ignore
const config = require("./package.json");
const cid = require("@4a/cid");
const fs = require("fs");
const request = require("request");
const path = require("path");
const alipay = require("egg-alipay");
const core_1 = require("@cool-midway/core");
const os = require("os");
/**
 * 支付
 */
let Sdk = class Sdk {
    /**
     * 初始化
     */
    async init() {
        this.aliConfig = await this.coolPlugin.getConfig(config.name.split("/")[1]);
        const { appId, notifyUrl, rsaPrivate, rsaPublic, signType = "RSA2" } = this.aliConfig || {};
        if (appId && notifyUrl && rsaPrivate && rsaPublic && signType) {
            if (this.aliConfig.sandbox == "1") {
                this.aliConfig.sandbox = true;
            }
            let aliPrivatePath;
            let aliPublicPath;
            try {
                if (os.type().includes('Window')) {
                    throw new Error('Window');
                }
                // 处理证书文件
                aliPrivatePath = `${os.tmpdir()}/aliPrivate.pem`;
                aliPublicPath = `${os.tmpdir()}/aliPublic.pem`;
                // 下载文件到本地
                await this.download(aliPrivatePath, rsaPrivate);
                await this.download(aliPublicPath, rsaPublic);
            }
            catch (error) {
                const coolPath = path.join(this.app.getBaseDir(), '..', '/cool');
                if (!fs.existsSync(coolPath)) {
                    fs.mkdirSync(coolPath);
                }
                aliPrivatePath = coolPath + '/aliPrivate.pem';
                aliPublicPath = coolPath + '/aliPublic.pem';
                // 下载文件到本地
                await this.download(aliPrivatePath, rsaPrivate);
                await this.download(aliPublicPath, rsaPublic);
            }
            this.aliConfig.rsaPrivate = path.resolve(aliPrivatePath);
            this.aliConfig.rsaPublic = path.resolve(aliPublicPath);
            this.pay = new alipay(this.aliConfig);
        }
        return await this.checkStatus();
    }
    /**
     * 下载文件
     * @param path
     * @param url
     */
    async download(path, url) {
        return new Promise((resolve, reject) => {
            if (fs.existsSync(path)) {
                fs.unlinkSync(path);
            }
            let file = null;
            let req = null;
            let stream = fs.createWriteStream(path);
            stream.on("finish", function (err) {
                file.close();
                resolve(path);
            });
            req = request(url);
            file = req.pipe(stream);
            req.on("response", function (data) { });
            req.on("data", function (chunk) { });
        });
    }
    /**
     * 检查状态
     * @returns
     */
    async checkStatus() {
        if (!this.pay) {
            return core_1.PLUGINSTATUS.NOCONF;
        }
        return core_1.PLUGINSTATUS.USABLE;
    }
    /**
     * 微信支付
     * @returns
     */
    getInstance() {
        return this.pay;
    }
    /**
     * 签名
     * @param req
     * @returns
     */
    signVerify(req) {
        return this.pay.signVerify(req);
    }
    /**
     * 创建订单
     */
    createOrderNum(length = 26) {
        return cid(length);
    }
    /**
     * 动态配置支付参数
     * @param config
     * @returns
     */
    initPay(config) {
        return new alipay(config);
    }
};
__decorate([
    decorator_1.Inject("cool:coolPlugin"),
    __metadata("design:type", core_1.CoolPlugin)
], Sdk.prototype, "coolPlugin", void 0);
__decorate([
    decorator_1.App(),
    __metadata("design:type", Object)
], Sdk.prototype, "app", void 0);
__decorate([
    decorator_1.Init(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Sdk.prototype, "init", null);
Sdk = __decorate([
    decorator_1.Provide(),
    decorator_1.Scope(decorator_1.ScopeEnum.Singleton)
], Sdk);
exports.Sdk = Sdk;
//# sourceMappingURL=sdk.js.map