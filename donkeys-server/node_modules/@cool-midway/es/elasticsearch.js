"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoolElasticSearch = void 0;
const decorator_1 = require("@midwayjs/decorator");
const elasticsearch_1 = require("./decorator/elasticsearch");
const decorator_2 = require("@midwayjs/decorator");
const core_1 = require("@cool-midway/core");
const elasticsearch_2 = require("@elastic/elasticsearch");
const _ = require("lodash");
/**
 * 搜索引擎
 */
let CoolElasticSearch = class CoolElasticSearch {
    async init() {
        try {
            this.esConfig = await this.coolPlugin.getConfig("elasticsearch");
            if (!this.esConfig && _.isEmpty(this.esConfig.nodes)) {
                return core_1.PLUGINSTATUS.NOCONF;
            }
            if (this.esConfig.nodes.length == 1) {
                this.client = new elasticsearch_2.Client({ node: this.esConfig.nodes[0] });
            }
            else {
                this.client = new elasticsearch_2.Client({ nodes: this.esConfig.nodes });
            }
            const status = await this.checkStatus();
            if (status == core_1.PLUGINSTATUS.USABLE) {
                this.client.ping({}, { requestTimeout: 30000 }, (error) => {
                    if (error) {
                        this.coreLogger.error("cool elasticsearch fail", error);
                    }
                    else {
                        this.app.getApplicationContext().registry.registerObject('esClient', this.client);
                        this.coolEventManager.emit('esReady', this.client);
                        this.scan();
                    }
                });
            }
            return status;
        }
        catch (error) {
            return core_1.PLUGINSTATUS.UNKNOWNERR;
        }
    }
    async scan() {
        const modules = decorator_2.listModule(elasticsearch_1.COOL_ES_KEY);
        for (let module of modules) {
            const providerId = decorator_1.getProviderId(module);
            const cls = await this.app.getApplicationContext().getAsync(providerId);
            const data = decorator_1.getClassMetadata(elasticsearch_1.COOL_ES_KEY, module);
            this.createIndex(cls, data, providerId, module);
        }
    }
    /**
     * 检查插件状态
     */
    async checkStatus() {
        return core_1.PLUGINSTATUS.USABLE;
    }
    /**
     * 数据更新事件
     * @param method
     * @param data
     */
    async esDataChange(method, data) {
        //this.coolEventManager.emit('esDataChange', { method, data });
    }
    /**
     * 创建索引
     * @param cls
     * @param config
     */
    async createIndex(cls, config, providerId, module) {
        cls.index = config.name;
        cls.client = this.client;
        const body = {
            settings: {
                number_of_shards: config.shards,
                number_of_replicas: config.replicas,
                analysis: {
                    analyzer: {
                        comma: { type: "pattern", pattern: "," },
                        blank: { type: "pattern", pattern: " " },
                    },
                },
                mapping: {
                    nested_fields: {
                        limit: 100,
                    },
                },
            },
            mappings: {
                properties: {},
            },
        };
        if (config.analyzers) {
            for (const analyzer of config.analyzers) {
                for (const key in analyzer) {
                    body.settings.analysis.analyzer[key] = analyzer[key];
                }
            }
        }
        const param = {
            index: config.name,
            body,
        };
        param.body = body;
        param.body.mappings.properties = cls.indexInfo();
        this.esDataChange('createIndex', {
            properties: param.body.mappings.properties,
            config
        });
        this.client.indices.exists({ index: config.name }).then(async (res) => {
            if (!res.body) {
                await this.client.indices.create(param).then((res) => {
                    if (res.body.acknowledged) {
                        this.coreLogger.info("\x1B[36m [cool:core] midwayjs cool elasticsearch ES索引创建成功: " +
                            config.name +
                            " \x1B[0m");
                    }
                });
            }
            else {
                const updateParam = {
                    index: config.name,
                    body: param.body.mappings,
                };
                await this.client.indices.putMapping(updateParam).then((res) => {
                    if (res.body.acknowledged) {
                        this.coreLogger.info("\x1B[36m [cool:core] midwayjs cool elasticsearch ES索引更新成功: " +
                            config.name +
                            " \x1B[0m");
                    }
                });
            }
        });
        //this.app.getApplicationContext().registry.removeDefinition(providerId);
        this.app.getApplicationContext().registry.registerObject(providerId, cls);
        //this.app.getApplicationContext().registry.removeDefinition(getProviderUUId(module));
        this.app.getApplicationContext().registry.registerObject(decorator_1.getProviderUUId(module), cls);
    }
};
__decorate([
    decorator_1.App(),
    __metadata("design:type", Object)
], CoolElasticSearch.prototype, "app", void 0);
__decorate([
    decorator_1.Logger(),
    __metadata("design:type", Object)
], CoolElasticSearch.prototype, "coreLogger", void 0);
__decorate([
    decorator_1.Inject("cool:coolPlugin"),
    __metadata("design:type", core_1.CoolPlugin)
], CoolElasticSearch.prototype, "coolPlugin", void 0);
__decorate([
    decorator_1.Inject('cool:coolEventManager'),
    __metadata("design:type", core_1.CoolEventManager)
], CoolElasticSearch.prototype, "coolEventManager", void 0);
__decorate([
    decorator_1.Init(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], CoolElasticSearch.prototype, "init", null);
CoolElasticSearch = __decorate([
    decorator_1.Provide()
], CoolElasticSearch);
exports.CoolElasticSearch = CoolElasticSearch;
//# sourceMappingURL=elasticsearch.js.map