"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoolSocketIO = void 0;
const core_1 = require("@cool-midway/core");
const decorator_1 = require("@midwayjs/decorator");
const core_2 = require("@midwayjs/core");
const redis_1 = require("@cool-midway/redis");
const socket_io_1 = require("socket.io");
const core_3 = require("@midwayjs/core");
const redisAdapter = require("socket.io-redis");
const IORedis = require("ioredis");
const _1 = require(".");
let CoolSocketIO = class CoolSocketIO {
    async init() {
        try {
            const SocketIOSymbol = Symbol.for('COOL-SOCKET.IO#IO');
            if (this.app[SocketIOSymbol]) {
                return core_1.PLUGINSTATUS.USABLE;
            }
            this.redisConfig = await this.coolPlugin.getConfig('redis');
            if (!this.redisConfig) {
                return core_1.PLUGINSTATUS.NOCONF;
            }
            const getConfig = this.redisConfig.redis ? this.redisConfig.redis : this.redisConfig;
            if (typeof getConfig == 'string') {
                this.redisConfig = JSON.parse(getConfig);
            }
            if (!this.redisConfig.password) {
                delete this.redisConfig.password;
            }
            // 获得框架的http服务
            // @ts-ignore
            const server = this.app.webFramework.app.server;
            this.io = new socket_io_1.Server(server, this.socketConfig || {});
            this.io.serveClient(false);
            let redis;
            if (this.redisConfig instanceof Array) {
                redis = new IORedis.Cluster(this.redisConfig);
                // @ts-ignore
                this.io.adapter(redisAdapter({
                    pubClient: redis,
                    subClient: redis
                }));
            }
            else {
                // @ts-ignore
                this.io.adapter(redisAdapter(this.redisConfig));
            }
            this.app[SocketIOSymbol] = this.io;
            const socketModules = core_3.listModule(_1.COOL_SOCKET_KEY);
            const socketNamespaces = [];
            for (const module of socketModules) {
                const { namespace = '/' } = decorator_1.getClassMetadata(_1.COOL_SOCKET_KEY, module);
                if (socketNamespaces.includes(namespace)) {
                    this.coreLogger.warn('exist the same socket namespaces');
                }
                else {
                    socketNamespaces.push(namespace);
                }
                this.handlerEvent(this.io.of(namespace), module);
            }
            return core_1.PLUGINSTATUS.USABLE;
        }
        catch (error) {
            return core_1.PLUGINSTATUS.NOCONF;
        }
    }
    async handlerEvent(io, module) {
        const moduleInstance = await this.app.getApplicationContext().getAsync(core_2.getProviderId(module));
        moduleInstance['io'] = io;
        const events = decorator_1.getClassMetadata(_1.COOL_SOCKET_EVENT_KEY, module);
        for (const event of events) {
            io.on(event.propertyKey, (...args) => {
                moduleInstance[event.propertyKey](...args);
            });
        }
    }
    /**
     * 检查状态
     */
    async checkStatus() {
        return await this.redisCacheHandler.checkStatus();
    }
};
__decorate([
    decorator_1.Inject('cool:coolPlugin'),
    __metadata("design:type", core_1.CoolPlugin)
], CoolSocketIO.prototype, "coolPlugin", void 0);
__decorate([
    decorator_1.App(),
    __metadata("design:type", Object)
], CoolSocketIO.prototype, "app", void 0);
__decorate([
    decorator_1.Logger(),
    __metadata("design:type", Object)
], CoolSocketIO.prototype, "coreLogger", void 0);
__decorate([
    decorator_1.Config('cool.socket'),
    __metadata("design:type", Object)
], CoolSocketIO.prototype, "socketConfig", void 0);
__decorate([
    decorator_1.Inject('redis:redisCacheHandler'),
    __metadata("design:type", redis_1.RedisCacheHandler)
], CoolSocketIO.prototype, "redisCacheHandler", void 0);
__decorate([
    decorator_1.Init(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], CoolSocketIO.prototype, "init", null);
CoolSocketIO = __decorate([
    decorator_1.Provide(),
    decorator_1.Scope(decorator_1.ScopeEnum.Singleton)
], CoolSocketIO);
exports.CoolSocketIO = CoolSocketIO;
//# sourceMappingURL=socket.js.map