"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OssFileHandler = void 0;
const decorator_1 = require("@midwayjs/decorator");
const core_1 = require("@cool-midway/core");
const crypto = require("crypto");
const moment = require("moment");
const uuid_1 = require("uuid");
const axios_1 = require("axios");
// @ts-ignore
const config = require("./package.json");
const OSS = require("ali-oss");
/**
 * oss上传
 */
let OssFileHandler = class OssFileHandler {
    async init() {
        return await this.checkStatus();
    }
    /**
     * 获得客户端
     * @returns
     */
    async getClient() {
        const { accessKeyId, accessKeySecret, bucket, endpoint } = await this.coolPlugin.getConfig(config.name.split("/")[1]);
        return new OSS({
            region: endpoint.split(".")[0],
            accessKeyId,
            accessKeySecret,
            bucket,
        });
    }
    async upload(ctx) {
        const { accessKeyId, accessKeySecret, bucket, endpoint } = await this.coolPlugin.getConfig(config.name.split("/")[1]);
        const oss = {
            bucket,
            region: endpoint.split(".")[0],
            accessKeyId,
            accessKeySecret,
            expAfter: 300000,
            maxSize: 1048576000, // 文件最大的 size
        };
        const host = `https://${bucket}.${endpoint}`;
        const expireTime = new Date().getTime() + oss.expAfter;
        const expiration = new Date(expireTime).toISOString();
        const policyString = JSON.stringify({
            expiration,
            conditions: [
                ["content-length-range", 0, 200 * 1024 * 1024], // 设置上传文件的大小限制,200mb
            ],
        });
        const policy = Buffer.from(policyString).toString("base64");
        const signature = crypto
            .createHmac("sha1", oss.accessKeySecret)
            .update(policy)
            .digest("base64");
        return {
            signature,
            policy,
            host,
            OSSAccessKeyId: accessKeyId,
            success_action_status: 200,
        };
    }
    async checkStatus() {
        const { accessKeyId, accessKeySecret, bucket, endpoint } = await this.coolPlugin.getConfig(config.name.split("/")[1]);
        if (!accessKeyId || !accessKeySecret || !bucket || !endpoint) {
            return core_1.PLUGINSTATUS.NOCONF;
        }
        try {
            this.upload();
        }
        catch (err) {
            return core_1.PLUGINSTATUS.CONFERR;
        }
        return core_1.PLUGINSTATUS.USABLE;
    }
    /**
     * 下载文件链接并上传到oss
     * @param url 文件链接
     * @param extend 扩展名
     * @param folder 文件夹
     * @returns
     */
    async uploadWithPic(url, extend, folder) {
        try {
            const data = await axios_1.default
                .get(url, { responseType: "arraybuffer" })
                .then((res) => {
                return res.data;
            });
            const name = `${folder ? folder + "/" : ""}` +
                moment().format("YYYYMMDD") +
                "/" +
                uuid_1.v1() + '.' +
                extend;
            const client = await this.getClient();
            return (await client.put(name, data)).url;
        }
        catch (err) {
            return { url };
        }
    }
    getMode() {
        return {
            mode: core_1.MODETYPE.CLOUD,
            type: "oss",
        };
    }
    getMetaFileObj() {
        return {
            mode: core_1.MODETYPE.CLOUD,
            type: "oss",
        };
    }
};
__decorate([
    decorator_1.Inject("cool:coolPlugin"),
    __metadata("design:type", core_1.CoolPlugin)
], OssFileHandler.prototype, "coolPlugin", void 0);
__decorate([
    decorator_1.App(),
    __metadata("design:type", Object)
], OssFileHandler.prototype, "app", void 0);
OssFileHandler = __decorate([
    decorator_1.Provide(),
    decorator_1.Scope(decorator_1.ScopeEnum.Request)
], OssFileHandler);
exports.OssFileHandler = OssFileHandler;
//# sourceMappingURL=oss.js.map