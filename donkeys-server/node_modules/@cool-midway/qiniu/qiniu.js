"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QiniuHandler = void 0;
const decorator_1 = require("@midwayjs/decorator");
const qiniu = require("qiniu");
const core_1 = require("@cool-midway/core");
// @ts-ignore
const config = require("./package.json");
let QiniuHandler = class QiniuHandler {
    async init() {
        this.namespace = config.name.split('/')[1];
        return await this.checkStatus();
    }
    async createKey(filename, uploadFolder) {
        let temp = filename.split('.');
        let lastName = '';
        let firstName = filename;
        if (temp.length > 1) {
            firstName = filename.substr(0, filename.length - temp[temp.length - 1].length - 1);
        }
        lastName = '.' + temp[temp.length - 1];
        firstName = firstName.substr(0, Math.min(firstName.length, 10));
        let tmpfolder = uploadFolder || '';
        if (tmpfolder.length > 0 && tmpfolder.lastIndexOf('/') != tmpfolder.length - 1) {
            tmpfolder += '/';
        }
        if (tmpfolder.length > 0 && tmpfolder.indexOf('/') == 0) {
            tmpfolder = tmpfolder.substr(1);
        }
        let key = tmpfolder +
            firstName +
            '-' +
            require('uuid').v4() +
            lastName;
        return key;
    }
    async upload(ctx) {
        let { fileName, folder } = ctx.request.query;
        let key = await this.createKey(fileName, folder);
        const { accessKey, secretKey, bucket, zone, publicDomain } = await this.coolPlugin.getConfig(this.namespace);
        let qiniuDomain = publicDomain;
        if (!qiniuDomain.endsWith('/')) {
            qiniuDomain += '/';
        }
        var mac = new qiniu.auth.digest.Mac(accessKey, secretKey);
        var options = {
            scope: bucket + ':' + key,
            deadline: (Date.now() / 1000) ^ 0 + 3600,
        };
        var putPolicy = new qiniu.rs.PutPolicy(options);
        var uploadToken = putPolicy.uploadToken(mac);
        return new Promise(async (resolve, reject) => {
            resolve({
                uploadUrl: `https://up-${zone}.qiniup.com/`,
                publicUrl: `${qiniuDomain}${key}`,
                uploadData: {
                    token: uploadToken,
                    key,
                    fileKey: 'file', //一并由表单传过去的文件名字段
                }
            });
        });
    }
    async checkStatus() {
        const { accessKey, secretKey, bucket, zone, publicDomain } = await this.coolPlugin.getConfig(this.namespace);
        if (!accessKey || !secretKey || !bucket || !zone || !publicDomain) {
            return core_1.PLUGINSTATUS.NOCONF;
        }
        return core_1.PLUGINSTATUS.USABLE;
    }
    getMode() {
        return {
            mode: core_1.MODETYPE.CLOUD,
            type: 'qiniu'
        };
    }
    getMetaFileObj() {
        return {
            mode: core_1.MODETYPE.CLOUD,
            type: 'qiniu'
        };
    }
};
__decorate([
    decorator_1.Inject('cool:coolPlugin'),
    __metadata("design:type", core_1.CoolPlugin)
], QiniuHandler.prototype, "coolPlugin", void 0);
__decorate([
    decorator_1.App(),
    __metadata("design:type", Object)
], QiniuHandler.prototype, "app", void 0);
__decorate([
    decorator_1.Logger(),
    __metadata("design:type", Object)
], QiniuHandler.prototype, "coreLogger", void 0);
__decorate([
    decorator_1.Init(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], QiniuHandler.prototype, "init", null);
QiniuHandler = __decorate([
    decorator_1.Provide(),
    decorator_1.Scope(decorator_1.ScopeEnum.Request)
], QiniuHandler);
exports.QiniuHandler = QiniuHandler;
;
//# sourceMappingURL=qiniu.js.map