"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const kits_1 = require("@tnwx/kits");
const AccessToken_1 = require("../AccessToken");
const QyApiConfigKit_1 = require("../wxcp/QyApiConfigKit");
const OpenCpAccessTokenApi_1 = require("./OpenCpAccessTokenApi");
/**
 * @author Javen
 * @copyright javendev@126.com
 * @description 获取授权企业的 AccessToken \n
 * 第三方服务商在取得企业的永久授权码后，通过此接口可以获取到企业的access_token。\n
 * 获取后可通过通讯录、应用、消息等企业接口来运营这些应用。\n
 */
class OpenCorpAccessTokenApi {
    /**
     * 获取 AccessToken
     * @param authCorpid 授权方corpid
     * @param permanentCode 永久授权码
     */
    static getAccessToken(authCorpid, permanentCode) {
        return __awaiter(this, void 0, void 0, function* () {
            let accessToken = yield this.getAvailableAccessToken(authCorpid, permanentCode);
            if (accessToken) {
                if (QyApiConfigKit_1.QyApiConfigKit.isDevMode()) {
                    console.debug('缓存中的 accesstoken');
                }
                return accessToken;
            }
            if (QyApiConfigKit_1.QyApiConfigKit.isDevMode()) {
                console.debug('刷新 accesstoken');
            }
            return yield this.refreshAccessToken(authCorpid, permanentCode);
        });
    }
    /**
     * 获取可用的 AccessToken
     * @param authCorpid 授权方corpid
     * @param permanentCode 永久授权码
     */
    static getAvailableAccessToken(authCorpid, permanentCode) {
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            let cache = QyApiConfigKit_1.QyApiConfigKit.getCache;
            let accessTokenJson = yield cache.get(authCorpid.concat('_').concat(permanentCode));
            if (accessTokenJson) {
                result = new AccessToken_1.AccessToken(accessTokenJson);
            }
            if (result && result.isAvailable()) {
                return result;
            }
            else {
                return undefined;
            }
        });
    }
    /**
     * 刷新 AccessToken
     * @param authCorpid 授权方corpid
     * @param permanentCode 永久授权码
     */
    static refreshAccessToken(authCorpid, permanentCode) {
        return __awaiter(this, void 0, void 0, function* () {
            let accessToken = yield OpenCpAccessTokenApi_1.OpenCpAccessTokenApi.getAccessToken(AccessToken_1.AccessTokenType.SUITE_TOKEN);
            let url = util.format(this.getCorpTokenUrl, accessToken.getAccessToken);
            let data = yield kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                auth_corpid: authCorpid,
                permanent_code: permanentCode
            }));
            if (data) {
                data = JSON.stringify(data);
                let accessToken = new AccessToken_1.AccessToken(data);
                let cache = QyApiConfigKit_1.QyApiConfigKit.getCache;
                cache.set(authCorpid.concat('_').concat(permanentCode), accessToken.getCacheJson);
                return accessToken;
            }
            else {
                throw new Error('获取accessToken异常');
            }
        });
    }
}
exports.OpenCorpAccessTokenApi = OpenCorpAccessTokenApi;
OpenCorpAccessTokenApi.getCorpTokenUrl = 'https://qyapi.weixin.qq.com/cgi-bin/service/get_corp_token?suite_access_token=%s';
//# sourceMappingURL=OpenCorpAccessTokenApi.js.map