"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const kits_1 = require("@tnwx/kits");
const AccessToken_1 = require("../AccessToken");
const QyApiConfigKit_1 = require("../wxcp/QyApiConfigKit");
/**
 * @author Javen
 * @copyright javendev@126.com
 * @description 企业微信开发平台 AccessToken
 */
class OpenCpAccessTokenApi {
    /**
     * 获取 acces_token
     * 1、先从缓存中获取，如果可用就直接返回
     * 2、如果缓存中的已过期就调用刷新接口来获取新的 acces_token
     * @param tokenType
     */
    static getAccessToken(tokenType = AccessToken_1.AccessTokenType.PROVIDER_TOKEN) {
        return __awaiter(this, void 0, void 0, function* () {
            let ac = QyApiConfigKit_1.QyApiConfigKit.getApiConfig;
            let accessToken = yield this.getAvailableAccessToken(ac, tokenType);
            if (accessToken) {
                if (QyApiConfigKit_1.QyApiConfigKit.isDevMode()) {
                    console.debug('缓存中的 accesstoken');
                }
                return accessToken;
            }
            if (QyApiConfigKit_1.QyApiConfigKit.isDevMode()) {
                console.debug('刷新 accesstoken');
            }
            return yield this.refreshAccessToken(ac, tokenType);
        });
    }
    /**
     * 获取可用的 AccessToken
     * @param apiConfig
     * @param tokenType
     */
    static getAvailableAccessToken(apiConfig, tokenType = AccessToken_1.AccessTokenType.PROVIDER_TOKEN) {
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            let cache = QyApiConfigKit_1.QyApiConfigKit.getCache;
            let accessTokenJson;
            if (tokenType === AccessToken_1.AccessTokenType.PROVIDER_TOKEN) {
                accessTokenJson = yield cache.get(apiConfig.getCorpId.concat('_').concat(tokenType));
            }
            else {
                accessTokenJson = yield cache.get(apiConfig.getAppId.concat('_').concat(tokenType));
            }
            if (accessTokenJson) {
                result = new AccessToken_1.AccessToken(accessTokenJson, tokenType);
            }
            if (result && result.isAvailable()) {
                return result;
            }
            else {
                return undefined;
            }
        });
    }
    /**
     * 获取新的 acces_token 并设置缓存
     * @param apiConfig
     * @param tokenType
     */
    static refreshAccessToken(apiConfig, tokenType = AccessToken_1.AccessTokenType.PROVIDER_TOKEN) {
        return __awaiter(this, void 0, void 0, function* () {
            let data;
            if (tokenType === AccessToken_1.AccessTokenType.PROVIDER_TOKEN) {
                data = yield kits_1.HttpKit.getHttpDelegate.httpPost(this.getProviderTokenUrl, JSON.stringify({
                    corpid: apiConfig.getCorpId,
                    provider_secret: apiConfig.getAppScrect
                }));
            }
            else {
                data = yield kits_1.HttpKit.getHttpDelegate.httpPost(this.getSuiteTokenUrl, JSON.stringify({
                    suite_id: apiConfig.getAppId,
                    suite_secret: apiConfig.getAppScrect,
                    suite_ticket: apiConfig.getTicket
                }));
            }
            if (data) {
                data = JSON.stringify(data);
                let accessToken = new AccessToken_1.AccessToken(data, tokenType);
                let cache = QyApiConfigKit_1.QyApiConfigKit.getCache;
                if (tokenType === AccessToken_1.AccessTokenType.PROVIDER_TOKEN) {
                    cache.set(apiConfig.getCorpId.concat('_').concat(tokenType), accessToken.getCacheJson);
                }
                else {
                    cache.set(apiConfig.getAppId.concat('_').concat(tokenType), accessToken.getCacheJson);
                }
                return accessToken;
            }
            else {
                throw new Error('获取accessToken异常');
            }
        });
    }
}
exports.OpenCpAccessTokenApi = OpenCpAccessTokenApi;
OpenCpAccessTokenApi.getProviderTokenUrl = 'https://qyapi.weixin.qq.com/cgi-bin/service/get_provider_token';
OpenCpAccessTokenApi.getSuiteTokenUrl = 'https://qyapi.weixin.qq.com/cgi-bin/service/get_suite_token';
//# sourceMappingURL=OpenCpAccessTokenApi.js.map