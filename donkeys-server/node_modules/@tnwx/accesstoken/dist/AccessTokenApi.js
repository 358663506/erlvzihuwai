"use strict";
/**
 * @author Javen
 * @copyright javendev@126.com
 * @description AccessTokenApi
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const AccessToken_1 = require("./AccessToken");
const ApiConfigKit_1 = require("./ApiConfigKit");
const kits_1 = require("@tnwx/kits");
class AccessTokenApi {
    /**
     *  获取 acces_token
     *  1、先从缓存中获取，如果可用就直接返回
     *  2、如果缓存中的已过期就调用刷新接口来获取新的 acces_token
     */
    static getAccessToken() {
        return __awaiter(this, void 0, void 0, function* () {
            let ac = ApiConfigKit_1.ApiConfigKit.getApiConfig;
            let accessToken = yield this.getAvailableAccessToken(ac);
            if (accessToken) {
                if (ApiConfigKit_1.ApiConfigKit.isDevMode()) {
                    console.debug('缓存中的 accesstoken');
                }
                return accessToken;
            }
            if (ApiConfigKit_1.ApiConfigKit.isDevMode()) {
                console.debug('刷新 accesstoken');
            }
            return yield this.refreshAccessToken(ac);
        });
    }
    /**
     *  通过 appId 从缓存中获取 acces_token
     *  @param apiConfig
     */
    static getAvailableAccessToken(apiConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            let cache = ApiConfigKit_1.ApiConfigKit.getCache;
            let accessTokenJson = yield cache.get(apiConfig.getAppId);
            if (accessTokenJson) {
                result = new AccessToken_1.AccessToken(accessTokenJson);
            }
            if (result && result.isAvailable()) {
                return result;
            }
            else {
                return undefined;
            }
        });
    }
    /**
     *  获取新的 acces_token 并设置缓存
     *  @param apiConfig
     */
    static refreshAccessToken(apiConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = util.format(this.url, apiConfig.getAppId, apiConfig.getAppScrect);
            let data = yield kits_1.HttpKit.getHttpDelegate.httpGet(url);
            if (data) {
                data = JSON.stringify(data);
                let accessToken = new AccessToken_1.AccessToken(data);
                let cache = ApiConfigKit_1.ApiConfigKit.getCache;
                cache.set(apiConfig.getAppId, accessToken.getCacheJson);
                return accessToken;
            }
            else {
                throw new Error('获取accessToken异常');
            }
        });
    }
}
exports.AccessTokenApi = AccessTokenApi;
AccessTokenApi.url = 'https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=%s&secret=%s';
//# sourceMappingURL=AccessTokenApi.js.map