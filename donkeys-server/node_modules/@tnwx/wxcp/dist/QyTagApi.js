"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const kits_1 = require("@tnwx/kits");
const accesstoken_1 = require("@tnwx/accesstoken");
/**
 * @author Javen
 * @copyright javendev@126.com
 * @description 标签管理相关接口
 */
class QyTagApi {
    /**
     * 创建标签
     * @param tagName 标签名称
     * @param tagId 标签id
     * @param accessToken {AccessToken}
     */
    static create(tagName, tagId, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.QyAccessTokenApi.getAccessToken();
            }
            let url = util.format(this.createUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                tagname: tagName,
                tagid: tagId
            }));
        });
    }
    /**
     * 更新标签名字
     * @param tagName 标签名称
     * @param tagId 标签id
     * @param accessToken {AccessToken}
     */
    static update(tagName, tagId, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.QyAccessTokenApi.getAccessToken();
            }
            let url = util.format(this.updateUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                tagname: tagName,
                tagid: tagId
            }));
        });
    }
    /**
     * 删除标签
     * @param tagId 标签id
     * @param accessToken {AccessToken}
     */
    static delete(tagId, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.QyAccessTokenApi.getAccessToken();
            }
            let url = util.format(this.deleteUrl, accessToken.getAccessToken, tagId);
            return kits_1.HttpKit.getHttpDelegate.httpGet(url);
        });
    }
    /**
     * 获取标签成员
     * @param tagId 标签id
     * @param accessToken {AccessToken}
     */
    static getUserByTagId(tagId, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.QyAccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getUserUrl, accessToken.getAccessToken, tagId);
            return kits_1.HttpKit.getHttpDelegate.httpGet(url);
        });
    }
    /**
     * 增加标签成员
     * @param tagId 标签id
     * @param userList 企业成员id列表
     * @param partyList 企业部门id列表
     * @param accessToken {AccessToken}
     */
    static addTagUsers(tagId, userList, partyList, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.QyAccessTokenApi.getAccessToken();
            }
            let url = util.format(this.addTagUsersUrl, accessToken.getAccessToken, tagId);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                tagid: tagId,
                userlist: userList,
                partylist: partyList
            }));
        });
    }
    /**
     * 删除标签成员
     * @param tagId 标签id
     * @param userList 企业成员id列表
     * @param partyList 企业部门id列表
     * @param accessToken {AccessToken}
     */
    static delTagUsers(tagId, userList, partyList, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.QyAccessTokenApi.getAccessToken();
            }
            let url = util.format(this.delTagUsersUrl, accessToken.getAccessToken, tagId);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                tagid: tagId,
                userlist: userList,
                partylist: partyList
            }));
        });
    }
    /**
     * 获取标签列表
     * @param accessToken {AccessToken}
     */
    static getTagList(accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.QyAccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpGet(url);
        });
    }
}
exports.QyTagApi = QyTagApi;
QyTagApi.createUrl = 'https://qyapi.weixin.qq.com/cgi-bin/tag/create?access_token=%s';
QyTagApi.updateUrl = 'https://qyapi.weixin.qq.com/cgi-bin/tag/update?access_token=%s';
QyTagApi.deleteUrl = 'https://qyapi.weixin.qq.com/cgi-bin/tag/delete?access_token=%s&tagid=%s';
QyTagApi.getUserUrl = 'https://qyapi.weixin.qq.com/cgi-bin/tag/get?access_token=%s&tagid=%s';
QyTagApi.addTagUsersUrl = 'https://qyapi.weixin.qq.com/cgi-bin/tag/addtagusers?access_token=%s';
QyTagApi.delTagUsersUrl = 'https://qyapi.weixin.qq.com/cgi-bin/tag/deltagusers?access_token=%s';
QyTagApi.getUrl = 'https://qyapi.weixin.qq.com/cgi-bin/tag/list?access_token=%s';
//# sourceMappingURL=QyTagApi.js.map