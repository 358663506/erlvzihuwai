import { AccessToken } from '@tnwx/accesstoken';
/**
 * @author Javen
 * @copyright javendev@126.com
 * @description 成员管理相关接口
 */
export declare class QyUserApi {
    private static createUrl;
    /**
     * 创建成员
     * @param jsonData 请求 JSON 数据
     * @param accessToken AccessToken
     */
    static create(jsonData: string, accessToken?: AccessToken): Promise<any>;
    private static updateUrl;
    /**
     * 更新成员
     * @param jsonData 请求 JSON 数据
     * @param accessToken AccessToken
     */
    static update(jsonData: string, accessToken?: AccessToken): Promise<any>;
    private static getUrl;
    /**
     * 读取成员
     * @param userId 成员 userId
     * @param accessToken AccessToken
     */
    static get(userId: string, accessToken?: AccessToken): Promise<any>;
    private static deleteUrl;
    /**
     * 删除成员
     * @param userId 成员 userId
     * @param accessToken AccessToken
     */
    static delete(userId: string, accessToken?: AccessToken): Promise<any>;
    private static batchDeleteUrl;
    /**
     * 批量删除成员
     * @param userIdList 成员 userId 列表
     * @param accessToken AccessToken
     */
    static batchDelete(userIdList: Array<string>, accessToken?: AccessToken): Promise<any>;
    private static departmentUserUrl;
    /**
     * 获取部门成员
     * @param departmentId 获取的部门id
     * @param fetchChild 是否递归获取子部门下面的成员：1-递归获取，0-只获取本部门
     * @param accessToken AccessToken
     */
    static getDepartmentUser(departmentId: string, fetchChild?: number, accessToken?: AccessToken): Promise<any>;
    private static departmentUserInfoUrl;
    /**
     * 获取部门成员详情
     * @param departmentId 获取的部门id
     * @param fetchChild 是否递归获取子部门下面的成员：1-递归获取，0-只获取本部门
     * @param accessToken AccessToken
     */
    static departmentUserInfo(departmentId: string, fetchChild?: number, accessToken?: AccessToken): Promise<any>;
    private static userIdToOpenIdUrl;
    /**
     * userid 转 openid
     * @param userId 获取的部门id
     * @param accessToken AccessToken
     */
    static toOpenId(userId: string, accessToken?: AccessToken): Promise<any>;
    private static openIdToUserIdUrl;
    /**
     * openid 转 userid
     * @param openId 获取的部门id
     * @param accessToken AccessToken
     */
    static toUerId(openId: string, accessToken?: AccessToken): Promise<any>;
    private static authSuccUrl;
    /**
     * 二次验证
     * @param userId 成员 userId
     * @param accessToken AccessToken
     */
    static authSucc(userId: string, accessToken?: AccessToken): Promise<any>;
    private static batchInviteUrl;
    /**
     * 邀请成员
     * @param users 成员ID列表, 最多支持1000个
     * @param partys 部门ID列表，最多支持100个
     * @param tags 标签ID列表，最多支持100个
     * @param accessToken AccessToken
     */
    static batchInvite(users?: Array<string>, partys?: Array<string>, tags?: Array<string>, accessToken?: AccessToken): Promise<any>;
    private static getJoinQrCodeUrl;
    /**
     * 获取加入企业二维码
     * @param sizeType qrcode尺寸类型，1: 171 x 171; 2: 399 x 399; 3: 741 x 741; 4: 2052 x 2052
     */
    static getJoinQrCode(sizeType: number): Promise<any>;
    private static getMobileHashCodeUrl;
    /**
     * 获取手机号随机串
     * @param mobile 手机号
     * @param state 企业自定义的state参数
     */
    static getMobileHashCode(mobile: string, state?: string): Promise<any>;
    private static getUserIdUrl;
    /**
     * 手机号获取userid
     * @param mobile 手机号
     * @param accessToken AccessToken
     */
    static getUserId(mobile: string, accessToken?: AccessToken): Promise<any>;
}
