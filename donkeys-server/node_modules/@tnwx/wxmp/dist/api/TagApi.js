"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const accesstoken_1 = require("@tnwx/accesstoken");
const kits_1 = require("@tnwx/kits");
/**
 * @author Javen
 * @copyright javendev@126.com
 * @description 用户标签
 */
class TagApi {
    /**
     * 创建标签
     * @param tagName
     */
    static create(tagName, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.createTagUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                tag: {
                    name: tagName
                }
            }));
        });
    }
    /**
     * 获取公众号已创建的标签
     * @param accessToken
     */
    static get(accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getTagUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpGet(url);
        });
    }
    /**
     * 编辑标签
     * @param tagId
     * @param tagName
     * @param accessToken
     */
    static update(tagId, tagName, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.updateTagUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                tag: {
                    id: tagId,
                    name: tagName
                }
            }));
        });
    }
    /**
     * 删除标签
     * @param tagId
     * @param accessToken
     */
    static delete(tagId, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.deleteTagUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                tag: {
                    id: tagId
                }
            }));
        });
    }
    /**
     * 获取标签下粉丝列表
     * @param tagId
     * @param nextOpenid
     * @param accessToken
     */
    static getUser(tagId, nextOpenid, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getUserTagUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                tagid: tagId,
                next_openid: nextOpenid
            }));
        });
    }
    /**
     * 批量为用户打标签
     * @param tagId
     * @param openIdList
     * @param accessToken
     */
    static batchAddTag(tagId, openIdList, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.batchTaggingUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                openid_list: openIdList,
                tagid: tagId
            }));
        });
    }
    /**
     * 批量为用户取消标签
     * @param tagId
     * @param openIdList
     * @param accessToken
     */
    static batchDelTag(tagId, openIdList, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.batchUnTaggingUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                openid_list: openIdList,
                tagid: tagId
            }));
        });
    }
    /**
     * 获取用户身上的标签列表
     * @param openId
     * @param accessToken
     */
    static getUserTag(openId, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getIdListUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                openid: openId
            }));
        });
    }
}
exports.TagApi = TagApi;
TagApi.createTagUrl = 'https://api.weixin.qq.com/cgi-bin/tags/create?access_token=%s';
TagApi.getTagUrl = 'https://api.weixin.qq.com/cgi-bin/tags/get?access_token=%s';
TagApi.updateTagUrl = 'https://api.weixin.qq.com/cgi-bin/tags/update?access_token=%s';
TagApi.deleteTagUrl = 'https://api.weixin.qq.com/cgi-bin/tags/delete?access_token=%s';
TagApi.getUserTagUrl = 'https://api.weixin.qq.com/cgi-bin/user/tag/get?access_token=%s';
TagApi.batchTaggingUrl = 'https://api.weixin.qq.com/cgi-bin/tags/members/batchtagging?access_token=%s';
TagApi.batchUnTaggingUrl = 'https://api.weixin.qq.com/cgi-bin/tags/members/batchuntagging?access_token=%s';
TagApi.getIdListUrl = 'https://api.weixin.qq.com/cgi-bin/tags/getidlist?access_token=%s';
//# sourceMappingURL=TagApi.js.map