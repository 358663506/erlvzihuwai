"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const accesstoken_1 = require("@tnwx/accesstoken");
const kits_1 = require("@tnwx/kits");
/**
 * @author Javen
 * @copyright javendev@126.com
 * @description 自定义菜单
 */
class MenuApi {
    /**
     * 创建菜单
     * @param menuJson
     * @param accessToken
     */
    static create(menuJson, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.createMenuUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, menuJson);
        });
    }
    /**
     * 删除菜单
     * @param accessToken
     */
    static delete(accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.deleteMenuUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpGet(url);
        });
    }
    /**
     * 查询菜单
     * @param accessToken
     */
    static get(accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getMenuUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpGet(url);
        });
    }
    /**
     * @param accessToken
     */
    static getCurrentSelfMenu(accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getSelfMenuInfoUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpGet(url);
        });
    }
    /**
     * 添加个性化菜单
     * @param menuJson
     */
    static addConditional(menuJson, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.addConditionalUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, menuJson);
        });
    }
    /**
     * 删除个性化菜单
     * @param menuId
     * @param accessToken
     */
    static deleteConditional(menuId, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.delConditionalUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                menuid: menuId
            }));
        });
    }
    /**
     * 测试个性化菜单匹配结果
     * @param openId
     * @param accessToken
     */
    static tryMatch(openId, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.tryMatchUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                user_id: openId
            }));
        });
    }
}
exports.MenuApi = MenuApi;
MenuApi.createMenuUrl = 'https://api.weixin.qq.com/cgi-bin/menu/create?access_token=%s';
MenuApi.deleteMenuUrl = 'https://api.weixin.qq.com/cgi-bin/menu/delete?access_token=%s';
MenuApi.getMenuUrl = 'https://api.weixin.qq.com/cgi-bin/menu/get?access_token=%s';
MenuApi.getSelfMenuInfoUrl = 'https://api.weixin.qq.com/cgi-bin/get_current_selfmenu_info?access_token=%s';
MenuApi.addConditionalUrl = 'https://api.weixin.qq.com/cgi-bin/menu/addconditional?access_token=%s';
MenuApi.delConditionalUrl = 'https://api.weixin.qq.com/cgi-bin/menu/delconditional?access_token=%s';
MenuApi.tryMatchUrl = 'https://api.weixin.qq.com/cgi-bin/menu/trymatch?access_token=%s';
//# sourceMappingURL=MenuApi.js.map