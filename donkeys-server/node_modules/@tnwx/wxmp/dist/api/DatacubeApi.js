"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const accesstoken_1 = require("@tnwx/accesstoken");
const kits_1 = require("@tnwx/kits");
/**
 * @author Javen
 * @copyright javendev@126.com
 * @description 数据统计接口
 */
class DatacubeApi {
    static getData(url, beginDate, endDate) {
        return __awaiter(this, void 0, void 0, function* () {
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                begin_date: beginDate,
                end_date: endDate
            }));
        });
    }
    /**
     * 获取用户增减数据 最大时间跨度：7天
     * @param beginDate 获取数据的起始日期
     * @param endDate 获取数据的结束日期
     * @param accessToken
     */
    static getUserSummary(beginDate, endDate, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getUserSummaryUrl, accessToken.getAccessToken);
            return this.getData(url, beginDate, endDate);
        });
    }
    /**
     * 获取累计用户数据 最大时间跨度：7天
     * @param beginDate 获取数据的起始日期
     * @param endDate 获取数据的结束日期
     * @param accessToken
     */
    static getUserCumulate(beginDate, endDate, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getUserCumulateUrl, accessToken.getAccessToken);
            return this.getData(url, beginDate, endDate);
        });
    }
    /**
     * 获取图文群发每日数据，最大跨度1天
     * @param beginDate
     * @param endDate
     * @param accessToken
     */
    static getArticleSummary(beginDate, endDate, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getArticleSummaryUrl, accessToken.getAccessToken);
            return this.getData(url, beginDate, endDate);
        });
    }
    /**
     * 获取图文群发总数据，最大跨度1天
     * @param beginDate
     * @param endDate
     * @param accessToken
     */
    static getArticleTotal(beginDate, endDate, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getArticleTotalUrl, accessToken.getAccessToken);
            return this.getData(url, beginDate, endDate);
        });
    }
    /**
     * 获取图文统计数据 最大跨度3天
     * @param beginDate
     * @param endDate
     * @param accessToken
     */
    static getUserRead(beginDate, endDate, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getUserReadUrl, accessToken.getAccessToken);
            return this.getData(url, beginDate, endDate);
        });
    }
    /**
     * 获取图文统计分时数据 最大跨度1天
     * @param beginDate
     * @param endDate
     * @param accessToken
     */
    static getUserReadHour(beginDate, endDate, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getUserReadHourUrl, accessToken.getAccessToken);
            return this.getData(url, beginDate, endDate);
        });
    }
    /**
     * 获取图文分享转发数据 最大跨度7天
     * @param beginDate
     * @param endDate
     * @param accessToken
     */
    static getUserShare(beginDate, endDate, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getUserShareUrl, accessToken.getAccessToken);
            return this.getData(url, beginDate, endDate);
        });
    }
    /**
     * 获取图文分享转发分时数据 最大跨度1天
     * @param beginDate
     * @param endDate
     * @param accessToken
     */
    static getUserShareHour(beginDate, endDate, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getUserShareHourUrl, accessToken.getAccessToken);
            return this.getData(url, beginDate, endDate);
        });
    }
    /**
     * 获取消息发送概况数据 最大跨度7天
     * @param beginDate
     * @param endDate
     * @param accessToken
     */
    static getUpStreamMsg(beginDate, endDate, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getUpStreamMsgUrl, accessToken.getAccessToken);
            return this.getData(url, beginDate, endDate);
        });
    }
    /**
     * 获取消息分送分时数据 最大跨度1天
     * @param beginDate
     * @param endDate
     * @param accessToken
     */
    static getUpStreamMsgHour(beginDate, endDate, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getUpStreamMsgHourUrl, accessToken.getAccessToken);
            return this.getData(url, beginDate, endDate);
        });
    }
    /**
     * 获取消息发送周数据 最大跨度30天
     * @param beginDate
     * @param endDate
     * @param accessToken
     */
    static getUpStreamMsgWeekMsg(beginDate, endDate, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getUpStreamMsgWeekMsgUrl, accessToken.getAccessToken);
            return this.getData(url, beginDate, endDate);
        });
    }
    /**
     * 获取消息发送月数据 最大跨度30天
     * @param beginDate
     * @param endDate
     * @param accessToken
     */
    static getUpStreamMsgMonth(beginDate, endDate, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getUpStreamMsgMonthUrl, accessToken.getAccessToken);
            return this.getData(url, beginDate, endDate);
        });
    }
    /**
     * 获取消息发送分布数据 最大跨度15天
     * @param beginDate
     * @param endDate
     */
    static getUpStreamMsgDist(beginDate, endDate, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getUpStreamMsgDistUrl, accessToken.getAccessToken);
            return this.getData(url, beginDate, endDate);
        });
    }
    /**
     * 获取消息发送分布周数据 最大跨度30天
     * @param beginDate
     * @param endDate
     */
    static getUpStreamMsgDistWeek(beginDate, endDate, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getUpStreamMsgDistWeekUrl, accessToken.getAccessToken);
            return this.getData(url, beginDate, endDate);
        });
    }
    /**
     * 获取消息发送分布月数据 最大跨度30天
     * @param beginDate
     * @param endDate
     */
    static getUpStreamMsgDistMonth(beginDate, endDate, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getUpStreamMsgDistMonthUrl, accessToken.getAccessToken);
            return this.getData(url, beginDate, endDate);
        });
    }
    /**
     * 获取接口分析数据 最大跨度30天
     * @param beginDate
     * @param endDate
     */
    static getInterFaceSummary(beginDate, endDate, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getInterFaceSummaryUrl, accessToken.getAccessToken);
            return this.getData(url, beginDate, endDate);
        });
    }
    /**
     * 获取接口分析分时数据 最大跨度1天
     * @param beginDate
     * @param endDate
     */
    static getInterFaceSummaryHour(beginDate, endDate, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getInterFaceSummaryHourUrl, accessToken.getAccessToken);
            return this.getData(url, beginDate, endDate);
        });
    }
}
exports.DatacubeApi = DatacubeApi;
DatacubeApi.getUserSummaryUrl = 'https://api.weixin.qq.com/datacube/getusersummary?access_token=%s';
DatacubeApi.getUserCumulateUrl = 'https://api.weixin.qq.com/datacube/getusercumulate?access_token=%s';
DatacubeApi.getArticleSummaryUrl = 'https://api.weixin.qq.com/datacube/getarticlesummary?access_token=%s';
DatacubeApi.getArticleTotalUrl = 'https://api.weixin.qq.com/datacube/getarticletotal?access_token=%s';
DatacubeApi.getUserReadUrl = 'https://api.weixin.qq.com/datacube/getuserread?access_token=%s';
DatacubeApi.getUserReadHourUrl = 'https://api.weixin.qq.com/datacube/getuserreadhour?access_token=%s';
DatacubeApi.getUserShareUrl = 'https://api.weixin.qq.com/datacube/getusershare?access_token=%s';
DatacubeApi.getUserShareHourUrl = 'https://api.weixin.qq.com/datacube/getusersharehour?access_token=%s';
DatacubeApi.getUpStreamMsgUrl = 'https://api.weixin.qq.com/datacube/getupstreammsg?access_token=%s';
DatacubeApi.getUpStreamMsgHourUrl = 'https://api.weixin.qq.com/datacube/getupstreammsghour?access_token=%s';
DatacubeApi.getUpStreamMsgWeekMsgUrl = 'https://api.weixin.qq.com/datacube/getupstreammsgweek?access_token=%s';
DatacubeApi.getUpStreamMsgMonthUrl = 'https://api.weixin.qq.com/datacube/getupstreammsgmonth?access_token=%s';
DatacubeApi.getUpStreamMsgDistUrl = 'https://api.weixin.qq.com/datacube/getupstreammsgdist?access_token=%s';
DatacubeApi.getUpStreamMsgDistWeekUrl = 'https://api.weixin.qq.com/datacube/getupstreammsgdistweek?access_token=%s';
DatacubeApi.getUpStreamMsgDistMonthUrl = 'https://api.weixin.qq.com/datacube/getupstreammsgdistmonth?access_token=%s';
DatacubeApi.getInterFaceSummaryUrl = 'https://api.weixin.qq.com/datacube/getinterfacesummary?access_token=%s';
DatacubeApi.getInterFaceSummaryHourUrl = 'https://api.weixin.qq.com/datacube/getinterfacesummaryhour?access_token=%s';
//# sourceMappingURL=DatacubeApi.js.map