"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const accesstoken_1 = require("@tnwx/accesstoken");
const kits_1 = require("@tnwx/kits");
/**
 * @author Javen
 * @copyright javendev@126.com
 * @description 会员卡接口
 */
class MemberCardApi {
    /**
     * 接口激活
     * @param jsonStr
     */
    static activate(jsonStr, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.activateUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify(jsonStr));
        });
    }
    /**
     * 普通一键激活-设置开卡字段接口
     * @param jsonStr
     */
    static setActivateUserForm(jsonStr, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.setActivateUserFormUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify(jsonStr));
        });
    }
    /**
     * 跳转型一键激活 获取用户提交资料
     * @param activateTicket
     */
    static getActivateTempInfo(activateTicket, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getActivateTempInfoUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                activate_ticket: activateTicket
            }));
        });
    }
    /**
     * 更新会员信息
     * @param jsonStr
     */
    static updateUser(jsonStr, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.updateUserUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, jsonStr);
        });
    }
    /**
     * 拉取会员信息（积分查询）接口
     * @param cardId
     * @param code
     */
    static getUserInfo(cardId, code, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getUserInfoUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                card_id: cardId,
                code: code
            }));
        });
    }
    /**
     * 设置支付后投放卡券接口
     * @param jsonStr
     */
    static payGiftCardAdd(jsonStr, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.payGiftCardAddUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, jsonStr);
        });
    }
    /**
     * 删除支付后投放卡券规则接口
     * @param ruleId
     */
    static payGiftCardDel(ruleId, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.payGiftCardDelUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                rule_id: ruleId
            }));
        });
    }
    /**
     * 查询支付后投放卡券规则详情接口
     * @param ruleId
     */
    static payGiftCardGet(ruleId, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.payGiftCardGetUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                rule_id: ruleId
            }));
        });
    }
    /**
     * 批量查询支付后投放卡券规则接口
     * @param effective
     * @param offset
     * @param count
     * @param type
     */
    static payGiftCardBatchGet(effective, offset, count, type = 'RULE_TYPE_PAY_MEMBER_CARD', accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.payGiftCardBatchGetUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                type: type,
                effective: effective,
                offset: offset,
                count: count
            }));
        });
    }
    /**
     * 拉取会员卡概况数据接口
     * @param beginDate 查询数据的起始时间
     * @param endDate 查询数据的截至时间
     * @param condSource 卡券来源，0为公众平台创建的卡券数据、1是API创建的卡券数据
     */
    static getMemberCardInfo(beginDate, endDate, condSource = 0, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getMemberCardInfoUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                begin_date: beginDate,
                end_date: endDate,
                cond_source: condSource
            }));
        });
    }
    /**
     * 拉取单张会员卡数据接口
     * @param beginDate 查询数据的起始时间
     * @param endDate 查询数据的截至时间
     * @param cardId 卡券id
     */
    static getMemberCardDetail(beginDate, endDate, cardId, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getMemberCardDetailUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                begin_date: beginDate,
                end_date: endDate,
                card_id: cardId
            }));
        });
    }
}
exports.MemberCardApi = MemberCardApi;
MemberCardApi.activateUrl = 'https://api.weixin.qq.com/card/membercard/activate?access_token=%s';
MemberCardApi.setActivateUserFormUrl = 'https://api.weixin.qq.com/card/membercard/activateuserform/set?access_token=%s';
MemberCardApi.getActivateTempInfoUrl = 'https://api.weixin.qq.com/card/membercard/activatetempinfo/get?access_token=%s';
MemberCardApi.updateUserUrl = 'https://api.weixin.qq.com/card/membercard/updateuser?access_token=%s';
MemberCardApi.getUserInfoUrl = 'https://api.weixin.qq.com/card/membercard/userinfo/get?access_token=%s';
MemberCardApi.payGiftCardAddUrl = 'https://api.weixin.qq.com/card/paygiftcard/add?access_token=%s';
MemberCardApi.payGiftCardDelUrl = 'https://api.weixin.qq.com/card/paygiftcard/delete?access_token=%s';
MemberCardApi.payGiftCardGetUrl = 'https://api.weixin.qq.com/card/paygiftcard/getbyid?access_token=%s';
MemberCardApi.payGiftCardBatchGetUrl = 'https://api.weixin.qq.com/card/paygiftcard/batchget?access_token=%s';
MemberCardApi.getMemberCardInfoUrl = 'https://api.weixin.qq.com/datacube/getcardmembercardinfo?access_token=%s';
MemberCardApi.getMemberCardDetailUrl = 'https://api.weixin.qq.com/datacube/getcardmembercarddetail?access_token=%s';
//# sourceMappingURL=MemberCardApi.js.map