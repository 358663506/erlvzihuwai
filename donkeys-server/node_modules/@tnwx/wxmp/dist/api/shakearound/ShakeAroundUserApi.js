"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const accesstoken_1 = require("@tnwx/accesstoken");
const kits_1 = require("@tnwx/kits");
/**
 * @author Javen
 * @copyright javendev@126.com
 * @description 获取设备及用户信息
 */
class ShakeAroundUserApi {
    /**
     * 获取设备及用户信息
     * @param ticket 摇周边业务的ticket，可在摇到的URL中得到，ticket生效时间为30分钟，每一次摇都会重新生成新的ticket
     * @param needPoi 是否需要返回门店poi_id
     * @param accessToken
     */
    static getShakeInfo(ticket, needPoi = false, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.getShakeInfoUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                ticket: ticket,
                need_poi: needPoi
            }));
        });
    }
}
exports.ShakeAroundUserApi = ShakeAroundUserApi;
ShakeAroundUserApi.getShakeInfoUrl = 'https://api.weixin.qq.com/shakearound/user/getshakeinfo?access_token=%s';
//# sourceMappingURL=ShakeAroundUserApi.js.map