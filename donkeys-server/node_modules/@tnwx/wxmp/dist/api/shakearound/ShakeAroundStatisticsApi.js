"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const accesstoken_1 = require("@tnwx/accesstoken");
const kits_1 = require("@tnwx/kits");
/**
 * @author Javen
 * @copyright javendev@126.com
 * @description 数据统计接口
 */
class ShakeAroundStatisticsApi {
    /**
     * 以设备为维度的数据统计接口
     * @param deviceIdentifier 指定页面的设备ID
     * @param beginDate 起始日期时间戳，最长时间跨度为30天，单位为秒
     * @param endDate 结束日期时间戳，最长时间跨度为30天，单位为秒
     * @param accessToken
     */
    static getByDevice(deviceIdentifier, beginDate, endDate, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.statisticsDeviceUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                device_identifier: deviceIdentifier,
                begin_date: beginDate,
                end_date: endDate
            }));
        });
    }
    /**
     * 批量查询设备统计数据接口
     * @param date 	指定查询日期时间戳，单位为秒
     * @param pageIndex 指定查询的结果页序号；返回结果按摇周边人数降序排序，每50条记录为一页
     * @param accessToken
     */
    static getDeviceList(date, pageIndex, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.statisticsDeviceListUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                date: date,
                page_index: pageIndex
            }));
        });
    }
    /**
     * 以页面为维度的数据统计接口
     * @param pageId 指定页面的设备ID
     * @param beginDate 起始日期时间戳，最长时间跨度为30天，单位为秒
     * @param endDate 结束日期时间戳，最长时间跨度为30天，单位为秒
     * @param accessToken
     */
    static getByPage(pageId, beginDate, endDate, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.statisticsPageUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                page_id: pageId,
                begin_date: beginDate,
                end_date: endDate
            }));
        });
    }
    /**
     * 批量查询页面统计数据接口
     * @param date 指定查询日期时间戳
     * @param pageIndex 指定查询的结果页序号；返回结果按摇周边人数降序排序，每50条记录为一页
     * @param accessToken
     */
    static getPageList(date, pageIndex, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!accessToken) {
                accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            }
            let url = util.format(this.statisticsPageListUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                date: date,
                page_index: pageIndex
            }));
        });
    }
}
exports.ShakeAroundStatisticsApi = ShakeAroundStatisticsApi;
ShakeAroundStatisticsApi.statisticsDeviceUrl = 'https://api.weixin.qq.com/shakearound/statistics/device?access_token=%s';
ShakeAroundStatisticsApi.statisticsDeviceListUrl = 'https://api.weixin.qq.com/shakearound/statistics/devicelist?access_token=%s';
ShakeAroundStatisticsApi.statisticsPageUrl = 'https://api.weixin.qq.com/shakearound/statistics/page?access_token=%s';
ShakeAroundStatisticsApi.statisticsPageListUrl = 'https://api.weixin.qq.com/shakearound/statistics/pagelist?access_token=%s';
//# sourceMappingURL=ShakeAroundStatisticsApi.js.map