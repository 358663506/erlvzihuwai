/// <reference types="node" />
import { RequestMethod } from './RequestMethod';
/**
 * @author Javen
 * @copyright javendev@126.com
 * @description 微信支付工具类
 */
export declare class PayKit {
    /**
     * 验证签名
     * @param signature   待验证的签名
     * @param body        应答主体
     * @param nonce       随机串
     * @param timestamp   时间戳
     * @param publicKey   平台公钥
     */
    static verifySignature(signature: string, body: string, nonce: string, timestamp: string, publicKey: Buffer): boolean;
    /**
     * 验证签名
     * @param headers     http 请求头
     * @param body        应答主体
     * @param publicKey   平台公钥
     */
    static verifySign(headers: any, body: string, publicKey: Buffer): boolean;
    /**
     * v3 创建签名
     *
     * @param {Array<string>} data  需要参与签名的参数
     * @param {Buffer} key          key.pem 证书
     * @returns {string}            返回签名结果
     */
    static createSign(data: Array<string>, key: Buffer): string;
    /**
     * v3 创建签名
     * @param {string} data   需要参与签名的参数
     * @param {Buffer} key    key.pem 证书
     * @returns {string}      返回签名结果
     */
    static createSignByStr(data: string, key: Buffer): string;
    /**
     * 证书和回调报文解密
     * @param key             apiKey3
     * @param nonce           加密使用的随机串初始化向量
     * @param associatedData  附加数据包
     * @param ciphertext      密文
     */
    static aes256gcmDecrypt(key: string, nonce: string, associatedData: string, ciphertext: string): string;
    /**
     * SHA256 with RSA 加密生成签名
     * @param key key.pem 证书 key
     * @param data 待签名串
     */
    static sha256WithRsa(key: Buffer, data: string): string;
    /**
     * 构建请求签名参数
     * @param method {RequestMethod} Http 请求方式
     * @param url 请求接口 /v3/certificates
     * @param timestamp 获取发起请求时的系统当前时间戳
     * @param nonceStr 随机字符串
     * @param body 请求报文主体
     */
    static buildReqSignMessage(method: RequestMethod, url: string, timestamp: string, nonceStr: string, body: string): string;
    /**
     * 构建应答签名参数
     * @param timestamp 应答时间戳
     * @param nonceStr 应答随机串
     * @param body 应答报文主体
     */
    static buildRepSignMessage(timestamp: string, nonceStr: string, body: string): string;
    /**
     * 构建签名参数
     * @param {Array<string>} data 待构建签名的参数
     * @returns {string}           返回待签名字符串
     */
    static buildSignMessage(data: Array<string>): string;
    /**
     * 拼接参数
     * @param map     待拼接的 Map 数据
     * @param connStr 连接符
     * @param encode  是否 urlencode
     * @param quotes  是否 ""
     */
    static createLinkString(map: Map<string, string>, connStr: string, encode: boolean, quotes: boolean): string;
    /**
     * 获取授权认证信息
     *
     * @param mchId     商户号
     * @param serialNo  商户API证书序列号
     * @param nonceStr  请求随机串
     * @param timestamp 时间戳
     * @param signature 签名值
     * @param authType  认证类型，目前为WECHATPAY2-SHA256-RSA2048
     */
    static getAuthorization(mchId: string, serialNo: string, nonceStr: string, timestamp: string, signature: string, authType: string): string;
    /**
     * 构建 v3 接口所需的 Authorization
     *
     * @param method    {RequestMethod} 请求方法
     * @param urlSuffix 可通过 WxApiType 来获取，URL挂载参数需要自行拼接
     * @param mchId     商户Id
     * @param serialNo  商户 API 证书序列号
     * @param key       key.pem 证书
     * @param body      接口请求参数
     */
    static buildAuthorization(method: RequestMethod, urlSuffix: string, mchId: string, serialNo: string, key: Buffer, body: string): Promise<string>;
    /**
     * 微信支付 Api-v3 get 请求
     * @param urlPrefix     请求接口前缀，可通过 WxDmainType 来获取
     * @param urlSuffix     请求接口后缀，可通过 WxApiType 来获取
     * @param mchId         商户号
     * @param serialNo      证书序列号
     * @param key           key.pem 证书
     * @param params        请求参数
     * @param platSerialNo  微信平台序列号
     */
    static exeGet(urlPrefix: string, urlSuffix: string, mchId: string, serialNo: string, key: Buffer, params?: Map<string, string>, platSerialNo?: string): Promise<any>;
    /**
     * 微信支付 Api-v3 post 请求
     * @param urlPrefix     请求接口前缀，可通过 WxDmainType 来获取
     * @param urlSuffix     请求接口后缀，可通过 WxApiType 来获取
     * @param mchId         商户号
     * @param serialNo      证书序列号
     * @param key           key.pem 证书
     * @param data          接口请求参数
     * @param platSerialNo  微信平台序列号
     */
    static exePost(urlPrefix: string, urlSuffix: string, mchId: string, serialNo: string, key: Buffer, data: string, platSerialNo?: string): Promise<any>;
    /**
     * 微信支付 Api-v3 put 请求
     * @param urlPrefix     请求接口前缀，可通过 WxDmainType 来获取
     * @param urlSuffix     请求接口后缀，可通过 WxApiType 来获取
     * @param mchId         商户号
     * @param serialNo      证书序列号
     * @param key           key.pem 证书
     * @param data          接口请求参数
     * @param platSerialNo  微信平台序列号
     */
    static exePut(urlPrefix: string, urlSuffix: string, mchId: string, serialNo: string, key: Buffer, data: string, platSerialNo?: string): Promise<any>;
    /**
     * 微信支付 Api-v3 delete 请求
     * @param urlPrefix     请求接口前缀，可通过 WxDmainType 来获取
     * @param urlSuffix     请求接口后缀，可通过 WxApiType 来获取
     * @param mchId         商户号
     * @param serialNo      证书序列号
     * @param key           key.pem 证书
     * @param platSerialNo  微信平台序列号
     */
    static exeDelete(urlPrefix: string, urlSuffix: string, mchId: string, serialNo: string, key: Buffer, platSerialNo?: string): Promise<any>;
    /**
     * 微信支付 Api-v3 upload 请求
     * @param urlPrefix     请求接口前缀，可通过 WxDmainType 来获取
     * @param urlSuffix     请求接口后缀，可通过 WxApiType 来获取
     * @param mchId         商户号
     * @param serialNo      证书序列号
     * @param key           key.pem 证书
     * @param filePath      需要上传的文件路径
     * @param data          请求参数
     * @param platSerialNo  微信平台序列号
     */
    static exeUpload(urlPrefix: string, urlSuffix: string, mchId: string, serialNo: string, key: Buffer, filePath: string, data: string, platSerialNo?: string): Promise<any>;
    /**
     * get 方法
     * @param url           请求 url
     * @param authorization 授权信息
     * @param serialNumber  证书序列号
     */
    static get(url: string, authorization: string, serialNumber?: string): Promise<any>;
    /**
     * post 方法
     * @param url           请求 url
     * @param authorization 授权信息
     * @param serialNumber  证书序列号
     */
    static post(url: string, data: string, authorization: string, serialNumber?: string): Promise<any>;
    /**
     * put 方法
     * @param url           请求 url
     * @param authorization 授权信息
     * @param serialNumber  证书序列号
     */
    static put(url: string, data: string, authorization: string, serialNumber?: string): Promise<any>;
    /**
     * delete 方法
     * @param url           请求 url
     * @param authorization 授权信息
     * @param serialNumber  证书序列号
     */
    static delete(url: string, authorization: string, serialNumber?: string): Promise<any>;
    /**
     * upload 方法
     * @param url           请求 url
     * @param filePath      文件路径
     * @param data          请求数据
     * @param authorization 授权信息
     * @param serialNumber  证书序列号
     */
    static upload(url: string, filePath: string, data: string, authorization: string, serialNumber?: string): Promise<any>;
    /**
     * 获取请求头
     * @param authorization 授权信息
     * @param serialNumber  证书序列号
     */
    private static getHeaders;
    /**
     * 微信支付 Api-v3
     *
     * @param {RequestMethod} requestMethod 请求方式
     * @param {string} urlPrefix 请求接口前缀，可通过 WxDmainType 来获取
     * @param {string} urlSuffix 请求接口后缀，可通过 WxApiType 来获取
     * @param {string} mchId 商户号
     * @param {string} serialNo 证书序列号
     * @param {Buffer} key  key.pem 证书
     * @param {string} [data] 请求参数
     * @param {Map<string, string>} [params] get 请求参数
     * @param {string} [platSerialNo] 微信平台序列号
     * @param {string} [filePath] 需要上传的文件路径
     */
    static v3(requestMethod: RequestMethod, urlPrefix: string, urlSuffix: string, mchId: string, serialNo: string, key: Buffer, data?: string, params?: Map<string, string>, platSerialNo?: string, filePath?: string): Promise<any>;
}
