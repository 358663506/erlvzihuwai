"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const kits_1 = require("@tnwx/kits");
const PayKit_1 = require("./PayKit");
const WxApiType_1 = require("./WxApiType");
const WxDomain_1 = require("./WxDomain");
/**
 * @author Javen
 * @copyright javendev@126.com
 * @description 微信支付
 */
class WxPay {
    /**
     * 获取沙箱环境验签秘钥
     * @param mchId  商户号
     * @param key api 密钥
     * @param signType 签名类型 默认为 MD5 加密
     */
    static getSignKey(mchId, key, signType = kits_1.SIGN_TYPE.SIGN_TYPE_MD5) {
        return new Promise(function (resolve, reject) {
            let reqObj = {
                mch_id: mchId,
                nonce_str: kits_1.Kits.generateStr() //生成随机字符串
            };
            kits_1.Kits.generateSignedXml(reqObj, key, signType)
                .then(xml => {
                kits_1.HttpKit.getHttpDelegate
                    .httpPost(WxDomain_1.WX_DOMAIN.CHINA.concat(WxApiType_1.WX_API_TYPE.GET_SIGN_KEY), String(xml))
                    .then(data => {
                    resolve(data);
                })
                    .catch(error => {
                    reject(error);
                });
            })
                .catch(error => {
                reject(error);
            });
        });
    }
    /**
     * 判断异步通知中的 sign 是否有效
     * @param notifyData 通知中的数据对象
     * @param key api 密钥
     */
    static notifySignatureValid(notifyData, key) {
        let signType;
        let signTypeInData = notifyData[kits_1.Kits.FIELD_SIGN_TYPE];
        if (!signTypeInData) {
            signType = kits_1.SIGN_TYPE.SIGN_TYPE_MD5;
        }
        else {
            signTypeInData = String(signTypeInData).trim();
            if (signTypeInData.length === 0) {
                signType = kits_1.SIGN_TYPE.SIGN_TYPE_MD5;
            }
            else if (signTypeInData === kits_1.SIGN_TYPE.SIGN_TYPE_MD5) {
                signType = kits_1.SIGN_TYPE.SIGN_TYPE_MD5;
            }
            else if (signTypeInData === kits_1.SIGN_TYPE.SIGN_TYPE_HMACSHA256) {
                signType = kits_1.SIGN_TYPE.SIGN_TYPE_HMACSHA256;
            }
            else {
                throw new Error('Invalid sign_type: ' + signTypeInData + ' in pay result notify');
            }
        }
        return this.isSignatureValid(notifyData, key, signType);
    }
    /**
     * 验证签名
     * @param data 通知中的数据对象
     * @param key api 密钥
     * @param signType 签名类型
     */
    static isSignatureValid(data, key, signType) {
        signType = signType || kits_1.SIGN_TYPE.SIGN_TYPE_MD5;
        if (data || typeof data !== 'object') {
            return false;
        }
        else if (!data[kits_1.Kits.FIELD_SIGN]) {
            return false;
        }
        else {
            return data[kits_1.Kits.FIELD_SIGN] === kits_1.Kits.generateSignature(data, key, signType);
        }
    }
    /**
     * 公众号支付/小程序-预付订单再次签名,注意此处签名方式需与统一下单的签名类型一致
     * @param prepayId  预付订单号
     * @param appId     应用编号
     * @param apiKey    API Key
     * @param signType  签名方式
     */
    static prepayIdCreateSign(prepayId, appId, apiKey, signType = kits_1.SIGN_TYPE.SIGN_TYPE_MD5) {
        let data = {
            appId: appId,
            timeStamp: parseInt((Date.now() / 1000).toString()),
            nonceStr: kits_1.Kits.generateStr(),
            package: 'prepay_id='.concat(prepayId),
            signType: signType
        };
        let packageSign = kits_1.Kits.generateSignature(data, apiKey, signType);
        data['paySign'] = packageSign;
        return data;
    }
    /**
     * APP 支付-预付订单再次签名,注意此处签名方式需与统一下单的签名类型一致
     * @param prepayId  预付订单号
     * @param appId     应用编号
     * @param partnerId 商户号
     * @param apiKey    API Key
     * @param signType  签名方式
     */
    static appPrepayIdCreateSign(prepayId, appId, partnerId, apiKey, signType = kits_1.SIGN_TYPE.SIGN_TYPE_MD5) {
        let data = {
            appid: appId,
            partnerid: partnerId,
            prepayid: prepayId,
            package: 'Sign=WXPay',
            timestamp: parseInt((Date.now() / 1000).toString()),
            noncestr: kits_1.Kits.generateStr()
        };
        let packageSign = kits_1.Kits.generateSignature(data, apiKey, signType);
        data['sign'] = packageSign;
        return data;
    }
    /**
     * 微信支付v3 创建签名
     *
     * @param {Array<string>} unSignArray 待签名参数数组
     * @param {Buffer} key key.pem 证书
     * @returns {string}  签名字符串
     */
    static createSign(unSignArray, key) {
        return PayKit_1.PayKit.createSign(unSignArray, key);
    }
}
exports.WxPay = WxPay;
//# sourceMappingURL=WxPay.js.map