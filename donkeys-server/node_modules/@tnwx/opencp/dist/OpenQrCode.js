"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const kits_1 = require("@tnwx/kits");
const accesstoken_1 = require("@tnwx/accesstoken");
/**
 * @author Javen
 * @copyright javendev@126.com
 * @description 推广二维码相关接口
 */
class OpenQrCode {
    /**
     * 获取注册码
     * @param templateId 推广包ID
     * @param corpName 企业名称
     * @param adminName 管理员姓名
     * @param adminMobile 管理员手机号
     * @param state 用户自定义的状态值
     * @param followUser 跟进人的userid，必须是服务商所在企业的成员
     */
    static getRegisterCode(templateId, corpName, adminName, adminMobile, state, followUser) {
        return __awaiter(this, void 0, void 0, function* () {
            let accessToken = yield accesstoken_1.OpenCpAccessTokenApi.getAccessToken(accesstoken_1.AccessTokenType.PROVIDER_TOKEN);
            let url = util.format(this.getRegisterCodeUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                template_id: templateId,
                corp_name: corpName,
                admin_name: adminName,
                admin_mobile: adminMobile,
                state: state,
                follow_user: followUser
            }));
        });
    }
    /**
     * 查询注册状态
     * @param registerCode 查询的注册码
     */
    static getRegisterCodeInfo(registerCode) {
        return __awaiter(this, void 0, void 0, function* () {
            let accessToken = yield accesstoken_1.OpenCpAccessTokenApi.getAccessToken(accesstoken_1.AccessTokenType.PROVIDER_TOKEN);
            let url = util.format(this.getRegisterCodeInfoUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                register_code: registerCode
            }));
        });
    }
    /**
     * 设置授权应用可见范围
     * @param accessToken 注册完成回调事件或者查询注册状态返回的access_token
     * @param agentId 授权方应用id
     * @param allowUser
     * @param allowParty
     * @param allowTag
     */
    static setScope(accessToken, agentId, allowUser, allowParty, allowTag) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = util.format(this.setScopeUrl, accessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                agentid: agentId,
                allow_user: allowUser,
                allow_party: allowParty,
                allow_tag: allowTag
            }));
        });
    }
    /**
     * 设置通讯录同步完成
     * @param accessToken 注册完成回调事件或者查询注册状态返回的access_token
     */
    static contactSyncSuccess(accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = util.format(this.contactSyncSuccessUrl, accessToken);
            return kits_1.HttpKit.getHttpDelegate.httpGet(url);
        });
    }
}
exports.OpenQrCode = OpenQrCode;
OpenQrCode.getRegisterCodeUrl = 'https://qyapi.weixin.qq.com/cgi-bin/service/get_register_code?provider_access_token=%s';
OpenQrCode.getRegisterCodeInfoUrl = 'https://qyapi.weixin.qq.com/cgi-bin/service/get_register_info?provider_access_token=%s';
OpenQrCode.setScopeUrl = 'https://qyapi.weixin.qq.com/cgi-bin/agent/set_scope?access_token=%s';
OpenQrCode.contactSyncSuccessUrl = 'https://qyapi.weixin.qq.com/cgi-bin/sync/contact_sync_success=%s';
//# sourceMappingURL=OpenQrCode.js.map