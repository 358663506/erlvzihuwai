"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const urlencode = require("urlencode");
const kits_1 = require("@tnwx/kits");
const accesstoken_1 = require("@tnwx/accesstoken");
/**
 * @author Javen
 * @copyright javendev@126.com
 * @description 身份验证-网页授权登录、扫码授权登录
 */
class OpenCpOauthApi {
    /**
     * 构造网页授权链接
     * @param suiteId 第三方应用id
     * @param redirectUri 授权后重定向的回调链接地址
     * @param scope 应用授权作用域。
     * @param state 重定向后会带上state参数，企业可以填写a-zA-Z0-9的参数值，长度不可超过128个字节
     */
    static getAuthorizeUrl(suiteId, redirectUri, scope, state) {
        return util.format(this.authorizeUrl, suiteId, urlencode.encode(redirectUri), scope, state);
    }
    /**
     * 构造扫码登录链接
     * @param corpId 服务商的corpId
     * @param redirectUri 授权登录之后目的跳转网址
     * @param state 重定向后会带上state参数
     * @param userType 支持登录的类型。admin代表管理员登录（使用微信扫码）,member代表成员登录（使用企业微信扫码），默认为admin
     */
    static getQrConnect(corpId, redirectUri, state, userType) {
        return util.format(this.qrConnectUrl, corpId, urlencode.encode(redirectUri), state, userType);
    }
    /**
     * 根据 code 获取成员信息
     * @param code 通过成员授权获取到的 code
     */
    static getUserInfo(code) {
        return __awaiter(this, void 0, void 0, function* () {
            let accessToken = yield accesstoken_1.OpenCpAccessTokenApi.getAccessToken(accesstoken_1.AccessTokenType.SUITE_TOKEN);
            let url = util.format(this.getUserInfoUrl, accessToken.getAccessToken, code);
            return kits_1.HttpKit.getHttpDelegate.httpGet(url);
        });
    }
    /**
     * 获取访问用户敏感信息
     * @param userTicket 成员票据
     */
    static getUserDetail(userTicket) {
        return __awaiter(this, void 0, void 0, function* () {
            let accessToken = yield accesstoken_1.OpenCpAccessTokenApi.getAccessToken(accesstoken_1.AccessTokenType.SUITE_TOKEN);
            let url = util.format(this.getUserDetailUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                user_ticket: userTicket
            }));
        });
    }
    /**
     * 获取登录用户信息
     * @param authCode oauth2.0授权企业微信管理员登录产生的code
     */
    static getLoginInfo(authCode) {
        return __awaiter(this, void 0, void 0, function* () {
            let accessToken = yield accesstoken_1.OpenCpAccessTokenApi.getAccessToken(accesstoken_1.AccessTokenType.PROVIDER_TOKEN);
            let url = util.format(this.getLoginInfoUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                auth_code: authCode
            }));
        });
    }
}
exports.OpenCpOauthApi = OpenCpOauthApi;
OpenCpOauthApi.authorizeUrl = 'https://open.weixin.qq.com/connect/oauth2/authorize?appid=%s&redirect_uri=%s&response_type=code&scope=%s&state=%s#wechat_redirect';
OpenCpOauthApi.qrConnectUrl = 'https://open.work.weixin.qq.com/wwopen/sso/3rd_qrConnect?appid=%s&redirect_uri=%s&state=%s&usertype=%s';
OpenCpOauthApi.getUserInfoUrl = 'https://qyapi.weixin.qq.com/cgi-bin/service/getuserinfo3rd?suite_access_token=%s&code=%s';
OpenCpOauthApi.getUserDetailUrl = 'https://qyapi.weixin.qq.com/cgi-bin/service/getuserdetail3rd?suite_access_token=%s';
OpenCpOauthApi.getLoginInfoUrl = 'https://qyapi.weixin.qq.com/cgi-bin/service/get_login_info?access_token=%s';
//# sourceMappingURL=OpenCpOauthApi.js.map