"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const accesstoken_1 = require("@tnwx/accesstoken");
const kits_1 = require("@tnwx/kits");
/**
 * @author Javen
 * @copyright javendev@126.com
 * @description 附近的小程序相关 API
 */
class NearByPoiApi {
    /**
     * 添加地点
     * @param picList 门店图片
     * @param storeName 门店名字
     * @param hour 营业时间，格式11:11-12:12
     * @param credential 资质号
     * @param address 地址
     * @param companyName 主体名字
     * @param serviceInfos 服务标签列表
     * @param qualificationList 证明材料
     * @param kfInfo 客服信息
     * @param poiId 门店的poi_id
     */
    static add(picList, storeName, hour, credential, address, companyName, serviceInfos, qualificationList, kfInfo, poiId) {
        return __awaiter(this, void 0, void 0, function* () {
            let accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            let url = util.format(this.addUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                is_comm_nearby: 1,
                pic_list: picList,
                service_infos: serviceInfos,
                store_name: storeName,
                hour: hour,
                credential: credential,
                address: address,
                company_name: companyName,
                qualification_list: qualificationList,
                kf_info: kfInfo,
                poi_id: poiId
            }));
        });
    }
    /**
     * 删除地点
     * @param poiId 附近地点 ID
     */
    static delete(poiId) {
        return __awaiter(this, void 0, void 0, function* () {
            let accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            let url = util.format(this.delUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                poi_id: poiId
            }));
        });
    }
    /**
     * 查看地点列表
     * @param page 起始页id（从1开始计数）
     * @param pageRow 每页展示个数（最多1000个）
     */
    static get(page, pageRow) {
        return __awaiter(this, void 0, void 0, function* () {
            let accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            let url = util.format(this.delUrl, accessToken.getAccessToken, page, pageRow);
            return kits_1.HttpKit.getHttpDelegate.httpGet(url);
        });
    }
    /**
     * 展示/取消展示附近小程序
     * @param poiId 附近地点 ID
     * @param status 是否展示
     */
    static showStatus(poiId, status) {
        return __awaiter(this, void 0, void 0, function* () {
            let accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            let url = util.format(this.showStatusUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                poi_id: poiId,
                status: status
            }));
        });
    }
}
exports.NearByPoiApi = NearByPoiApi;
NearByPoiApi.addUrl = 'https://api.weixin.qq.com/wxa/addnearbypoi?access_token=%s';
NearByPoiApi.delUrl = 'https://api.weixin.qq.com/wxa/delnearbypoi?access_token=%s';
NearByPoiApi.getUrl = 'https://api.weixin.qq.com/wxa/getnearbypoilist?access_token=%s&page=%s&page_rows=%s';
NearByPoiApi.showStatusUrl = 'https://api.weixin.qq.com/wxa/setnearbypoishowstatus?access_token=%s';
//# sourceMappingURL=NearByPoiApi.js.map