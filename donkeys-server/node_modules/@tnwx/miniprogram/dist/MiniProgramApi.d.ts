/**
 * @author Javen
 * @copyright javendev@126.com
 * @description 微信小程序、小游戏相关 API
 */
export declare class MiniProgramApi {
    private static checkSessionKeyUrl;
    /**
     * 校验服务器所保存的登录态 session_key 是否合法
     * @param openId 用户唯一标识符
     * @param signature 用户登录态签名
     * @param sigMethod 用户登录态签名的哈希方法
     */
    static checkSessionKey(openId: string, signature: string, sigMethod: string): Promise<any>;
    private static code2SessionUrl;
    /**
     * @param appId 小程序 appId
     * @param secret 小程序 appSecret
     * @param jsCode 登录时获取的 code
     */
    static code2Session(appId: string, secret: string, jsCode: string): Promise<any>;
    private static imgSecCheckUrl;
    /**
     * 校验图片是否违规
     * @param imgPath 图片路径
     */
    static imgSecCheck(imgPath: string): Promise<any>;
    private static mediaCheckAsyncUrl;
    /**
     * 异步校验图片/音频是否违规
     * @param mediaUrl
     * @param mediaType
     */
    static mediaCheckAsync(mediaUrl: string, mediaType: MiniProgramMediaType): Promise<any>;
    private static msgSecCheckUrl;
    /**
     * 校验文本是否违规
     * @param content
     */
    static msgSecCheck(content: string): Promise<any>;
    private static removeUserStorageUrl;
    /**
     * 删除已经上报到微信的key-value数据
     * @param openId 用户唯一标识符
     * @param signature 用户登录态签名
     * @param sigMethod 用户登录态签名的哈希方法
     * @param key 要删除的数据key列表
     */
    static removeUserStorage(openId: string, signature: string, sigMethod: string, keys: string[]): Promise<any>;
    private static setUserInteractiveDataUrl;
    /**
     * 写用户关系链互动数据存储
     * @param openId 用户唯一标识符
     * @param signature 用户登录态签名
     * @param sigMethod 用户登录态签名的哈希方法
     * @param kvList 要删除的数据列表 {"key":"1","value":0}
     */
    static setUserInteractiveData(openId: string, signature: string, sigMethod: string, kvList: []): Promise<any>;
    private static setUserStorageUrl;
    /**
     * 写用户关系链互动数据存储
     * @param openId 用户唯一标识符
     * @param signature 用户登录态签名
     * @param sigMethod 用户登录态签名的哈希方法
     * @param kvList 要删除的数据列表 {"key":"1","value":0}
     */
    static setUserStorage(openId: string, signature: string, sigMethod: string, kvList: []): Promise<any>;
    private static createActivieyIdUrl;
    /**
     * 创建被分享动态消息的 activity_id
     */
    static createActivityId(): Promise<any>;
    private static setUpdatableMsgUrl;
    /**
     * 修改被分享的动态消息
     *
     * @param activityId 动态消息的 ID
     * @param targetState 动态消息修改后的状态
     * @param templateInfo 动态消息对应的模板信息
     */
    static setUpdatableMsg(activityId: string, targetState: number, templateInfo: any): Promise<any>;
    private static createQRCodeUrl;
    /**
     * 获取小程序二维码
     * 适用于需要的码数量较少的业务场景。通过该接口生成的小程序码，永久有效，有数量限制
     *
     * @param path
     * @param width
     */
    static createQRCode(path: string, width?: number): Promise<any>;
    private static getWxAcodeUrl;
    /**
     * 获取小程序二维码
     * 适用于需要的码数量较少的业务场景。通过该接口生成的小程序码，永久有效，有数量限制
     *
     * @param path
     * @param width
     * @param autoColor
     * @param lineColor
     * @param isHyaline
     */
    static getWxAcode(path: string, width?: number, autoColor?: boolean, lineColor?: object, isHyaline?: boolean): Promise<any>;
    private static getUnlimitedUrl;
    /**
     * 获取小程序二维码
     * 适用于需要的码数量极多的业务场景。通过该接口生成的小程序码，永久有效，数量暂无限制。
     * @param scene
     * @param page
     * @param width
     * @param autoColor
     * @param lineColor
     * @param isHyaline
     */
    static getUnlimited(scene: string, page: string, width?: number, autoColor?: boolean, lineColor?: object, isHyaline?: boolean): Promise<any>;
    private static sendSubscribeMsgUrl;
    /**
     * 发送订阅消息
     *
     * @param toUser 接收者（用户）的 openid
     * @param templateId 所需下发的订阅模板id
     * @param data 模板内容
     * @param page 跳转页面路径
     */
    static sendSubscribeMsg(toUser: string, templateId: string, data: any, page?: string): Promise<any>;
    private static getPaidUnionidByTransactionIdUrl;
    /**
     * 用户支付完成后，获取该用户的 UnionId，无需用户授权
     * @param openId 支付用户唯一标识
     * @param transactionId 微信支付订单号
     */
    static getPaidUnionidByTransactionId(openId: string, transactionId: string): Promise<any>;
    private static getPaidUnionidByMchIdUrl;
    /**
     * 用户支付完成后，获取该用户的 UnionId，无需用户授权
     * @param openId 支付用户唯一标识
     * @param mchId 微信支付商户号
     * @param outTradeNo 微信支付商户订单号
     */
    static getPaidUnionidByMchId(openId: string, mchId: string, outTradeNo: string): Promise<any>;
    private static verifySoterSignatureUrl;
    /**
     * SOTER 生物认证秘钥签名验证
     * @param openId 用户 openid
     * @param jsonString 通过 wx.startSoterAuthentication 成功回调获得的 resultJSON 字段
     * @param jsonSignature 通过 wx.startSoterAuthentication 成功回调获得的 resultJSONSignature 字段
     */
    static verifySoterSignature(openId: string, jsonString: string, jsonSignature: string): Promise<any>;
    private static serviceMarketUrl;
    /**
     * 调用服务平台提供的服务
     * @param service 服务 ID
     * @param api 接口名
     * @param clientMsgId 随机字符串 ID，调用方请求的唯一标识
     * @param data 服务提供方接口数据
     */
    static serviceMarket(service: string, api: string, clientMsgId: string, data: any): Promise<any>;
    private static submitPagesUrl;
    /**
     * 小程序开发者可以通过本接口提交小程序页面url及参数信息，
     * 让微信可以更及时的收录到小程序的页面信息，
     * 开发者提交的页面信息将可能被用于小程序搜索结果展示。
     * @param pages 小程序页面信息列表
     */
    static submitPages(pages: any): Promise<any>;
    private static userLogSearchUrl;
    /**
     * 实时日志查询
     * @param date YYYYMMDD格式的日期，仅支持最近7天
     * @param begintime 开始时间，必须是date指定日期的时间
     * @param endtime 结束时间，必须是date指定日期的时间
     * @param start 开始返回的数据下标，用作分页，默认为0
     * @param limit 返回的数据条数，用作分页，默认为20
     * @param traceId 小程序启动的唯一ID，按TraceId查询会展示该次小程序启动过程的所有页面的日志。
     * @param path 小程序页面路径，例如pages/index/index
     * @param id 用户微信号或者OpenId
     * @param filterMsg 开发者通过setFileterMsg/addFilterMsg指定的filterMsg字段
     * @param level 日志等级，返回大于等于level等级的日志，level的定义为2（Info）、4（Warn）、8（Error），如果指定为4，则返回大于等于4的日志，即返回Warn和Error日志。
     */
    static userLogSearch(date: string, begintime: number, endtime: number, start?: number, limit?: number, traceId?: string, path?: string, id?: string, filterMsg?: string, level?: number): Promise<any>;
}
export declare enum MiniProgramMediaType {
    VOICE = 1,
    IMG = 2
}
