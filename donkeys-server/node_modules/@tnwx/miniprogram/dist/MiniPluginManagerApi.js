"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const accesstoken_1 = require("@tnwx/accesstoken");
const kits_1 = require("@tnwx/kits");
/**
 * @author Javen
 * @copyright javendev@126.com
 * @description 插件管理相关 API
 */
class MiniPluginManagerApi {
    /**
     * 向插件开发者发起使用插件的申请
     * @param appId 插件 appId
     * @param reason 申请使用理由
     */
    static applyPlugin(appId, reason) {
        return __awaiter(this, void 0, void 0, function* () {
            let accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            let url = util.format(this.pluginUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                action: 'apply',
                plugin_appid: appId,
                reason: reason
            }));
        });
    }
    /**
     * 获取当前所有插件使用方（供插件开发者调用）
     * @param page 要拉取第几页的数据
     * @param num 每页的记录数
     */
    static getPluginDevApplyList(page = 0, num = 20) {
        return __awaiter(this, void 0, void 0, function* () {
            let accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            let url = util.format(this.devPluginUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                action: 'dev_apply_list',
                page: page,
                num: num
            }));
        });
    }
    /**
     * 查询已添加的插件
     */
    static getPluginList() {
        return __awaiter(this, void 0, void 0, function* () {
            let accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            let url = util.format(this.pluginUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                action: 'list'
            }));
        });
    }
    /**
     * 修改插件使用申请的状态（供插件开发者调用）
     * @param action 修改操作 dev_agree 同意申请 dev_refuse 拒绝申请 dev_delete 删除已拒绝的申请者
     * @param appId 使用者的 appId,同意申请时填写
     * @param reason 拒绝理由,拒绝申请时填写
     */
    static setDevPluginApplyStatus(action, appId, reason) {
        return __awaiter(this, void 0, void 0, function* () {
            let accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            let url = util.format(this.devPluginUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                action: action,
                appid: appId,
                reason: reason
            }));
        });
    }
    /**
     * 删除已添加的插件
     * @param appId 插件 appId
     */
    static unbindPlugin(appId) {
        return __awaiter(this, void 0, void 0, function* () {
            let accessToken = yield accesstoken_1.AccessTokenApi.getAccessToken();
            let url = util.format(this.pluginUrl, accessToken.getAccessToken);
            return kits_1.HttpKit.getHttpDelegate.httpPost(url, JSON.stringify({
                action: 'unbind',
                plugin_appid: appId
            }));
        });
    }
}
exports.MiniPluginManagerApi = MiniPluginManagerApi;
MiniPluginManagerApi.pluginUrl = 'https://api.weixin.qq.com/wxa/plugin?access_token=%s';
MiniPluginManagerApi.devPluginUrl = 'https://api.weixin.qq.com/wxa/devplugin?access_token=%s';
//# sourceMappingURL=MiniPluginManagerApi.js.map